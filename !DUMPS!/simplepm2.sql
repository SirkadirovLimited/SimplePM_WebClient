-- phpMyAdmin SQL Dump
-- version 4.7.0
-- https://www.phpmyadmin.net/
--
-- Хост: localhost
-- Время создания: Апр 13 2018 г., 22:50
-- Версия сервера: 5.7.21-log
-- Версия PHP: 7.1.1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `simplepm2`
--
CREATE DATABASE IF NOT EXISTS `simplepm2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
USE `simplepm2`;

DELIMITER $$
--
-- Функции
--
DROP FUNCTION IF EXISTS `RatingBase`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `RatingBase` (`urId` BIGINT UNSIGNED) RETURNS FLOAT UNSIGNED READS SQL DATA
    SQL SECURITY INVOKER
begin

DECLARE sumVal BIGINT DEFAULT 0;
DECLARE rProblemsCount BIGINT DEFAULT 0;

SELECT
	SUM(`b`)
INTO
	`sumVal`
FROM
	`spm_submissions`
WHERE
	`status` = 'ready'
AND
	`testType` = 'release'
AND
    (
        `userId` = urId 
    AND
        `b` >= 0
    AND
        `classworkId` = 0
    AND
        `olympId` = 0
    )
ORDER BY
	`b` DESC
LIMIT
	30
;

SELECT
COUNT(`submissionId`)
INTO
`rProblemsCount`
FROM
`spm_submissions`
WHERE
	`status` = 'ready'
AND
	`testType` = 'release'
AND
	(
        `userId` = urId
    AND
        `b` >= 0
    AND
        `classworkId` = 0
    AND
        `olympId` = 0
    )
ORDER BY
	`b` DESC
LIMIT
	30
;

RETURN (sumVal / rProblemsCount);

end$$

DROP FUNCTION IF EXISTS `RatingCount`$$
CREATE DEFINER=`*`@`localhost` FUNCTION `RatingCount` (`uId` BIGINT UNSIGNED) RETURNS BIGINT(20) READS SQL DATA
    SQL SECURITY INVOKER
begin

DECLARE sumVal BIGINT DEFAULT 0;

SELECT
	SUM(`b`)
INTO
	sumVal
FROM
	`spm_submissions`
WHERE
	`status` = 'ready'
AND
	`testType` = 'release'
AND
	(
        `userId` = uId
    AND
        `b` > 0
    AND
        `classworkId` = 0
    AND
        `olympId` = 0
    );

RETURN sumVal;

end$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `spm_olympiads`
--

DROP TABLE IF EXISTS `spm_olympiads`;
CREATE TABLE IF NOT EXISTS `spm_olympiads` (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` tinytext NOT NULL,
  `description` text,
  `startTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `endTime` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `teacherId` bigint(20) UNSIGNED NOT NULL,
  `type` enum('Private','Public') NOT NULL,
  `testing_type` tinytext NOT NULL,
  `problems_list` mediumtext NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `spm_problems`
--

DROP TABLE IF EXISTS `spm_problems`;
CREATE TABLE IF NOT EXISTS `spm_problems` (
  `id` mediumint(8) UNSIGNED NOT NULL AUTO_INCREMENT,
  `enabled` tinyint(1) NOT NULL DEFAULT '1',
  `difficulty` tinyint(3) UNSIGNED NOT NULL,
  `category_id` smallint(5) UNSIGNED NOT NULL,
  `name` tinytext NOT NULL,
  `description` mediumtext NOT NULL,
  `input_description` mediumtext,
  `output_description` mediumtext,
  `authorSolution` mediumblob,
  `authorSolutionLanguage` tinytext,
  `adaptProgramOutput` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `spm_problems`
--

INSERT INTO `spm_problems` (`id`, `enabled`, `difficulty`, `category_id`, `name`, `description`, `input_description`, `output_description`, `authorSolution`, `authorSolutionLanguage`, `adaptProgramOutput`) VALUES
(1001, 1, 1, 1, 'Hello, world!', 'Напишіть програму, що виведе у вихідний потік рядок &quot;Hello, world!&quot; і одразу ж завершить свою роботу.', '', 'В вихідний потік вивести фразу \"Hello, world!\".', 0x7573696e672053797374656d3b0d0a0d0a6e616d6573706163652070726f626c656d0d0a7b0d0a202020200d0a20202020636c617373204d61696e436c6173730d0a202020207b0d0a20202020202020200d0a20202020202020207075626c69632073746174696320766f6964204d61696e28290d0a20202020202020207b0d0a202020202020202020202020436f6e736f6c652e57726974654c696e65282248656c6c6f2c20776f726c642122293b0d0a20202020202020207d0d0a20202020202020200d0a202020207d0d0a202020200d0a7d, 'csharp', 1),
(1002, 1, 1, 1, 'A+B', 'Вивести у стандартний вихідний потік суму A і B.', 'У вхідному потоці надаються 2 цілих числа через пробіл, що знаходяться у проміжку від -32000 до 32000.', 'В вихідний потік вивести суму чисел, що надані у вхідному потоці.', 0x76617220612c623a696e74656765723b0d0a626567696e0d0a20202020726561646c6e28612c62293b0d0a20202020777269746528612b62293b0d0a656e642e, 'freepascal', 1),
(1003, 1, 1, 1, 'C+D', 'Вивести на екран суму речових&amp;nbsp;чисел C и D.', 'У вхідному потоці надано 2 речових числа, що знаходяться у діапазоні від -32000 до 32000.', 'Вивести на екран суму наданих чисел із точністю 3 знаки після точки.', 0x76617220632c643a7265616c3b0d0a626567696e0d0a20202020726561646c6e28632c64293b0d0a2020202077726974652828632b64293a303a33293b0d0a656e642e, 'freepascal', 1),
(1004, 1, 2, 6, 'Надтяжка задача', '&lt;p&gt;Вивести даний у вхідному потоці масив у вихідний потік.&lt;/p&gt;', 'У першому рядку вхідного потоку задано натуральне число N - кількість елементів цілочисельного масиву (N <1000).\r\nУ другому рядку перераховані через пробіл значення елементів масиву Ai (-32000 <Ai <32000)', 'Вивести в стовпчик значення всіх елементів заданого масиву в прямому порядку.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a20202020692c6e3a696e74656765723b0d0a626567696e0d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a20202020202020207265616428615b695d293b0d0a202020202020202077726974656c6e28615b695d293b0d0a20202020656e643b0d0a656e642e, 'freepascal', 1),
(1005, 1, 2, 6, 'Пошук найменшого', '&lt;p&gt;У вхідному потоці надана послідовність чисел. Знайти в ній найменше число.&lt;/p&gt;', 'Задано спочатку число N (кількість чисел в послідовності), а потім на новому рядку N чисел. Всі числа - з діапазону Integer (|a[i]| <= 32000). N <= 100.', 'Виведіть на екран найменше число.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a20202020692c6e3a696e74656765723b0d0a202020206d696e3a696e74656765723b0d0a626567696e0d0a20202020726561646c6e286e293b0d0a202020206d696e3a3d33323030303b0d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a20202020202020207265616428615b695d293b0d0a2020202020202020696620615b695d3c6d696e207468656e206d696e3a3d615b695d3b0d0a20202020656e643b0d0a202020207772697465286d696e293b0d0a656e642e, 'freepascal', 1),
(1006, 1, 4, 6, 'Вивести одиноких', '&lt;p&gt;Дано два масиви чисел. Потрібно вивести у вихідний файл ті елементи першого масиву (в тому порядку, в якому вони йдуть в першому масиві), яких немає в другому масиві.&lt;/p&gt;', 'У вхідному потоці записано спочатку число N - кількість елементів в першому\r\nмасиві, потім N чисел - елементи масиву. Потім записано число M - кількість\r\nелементів в другому масиві. Потім записані елементи другого масиву.\r\nКількість елементів кожного масиву не перевищує 100. Самі елементи -\r\nчисла з діапазону Longint (|a[i]| <= 2 147 483 647).', 'У вихідний потік виведіть ті елементи першого масиву, яких немає в другому в\r\nтому порядку, в якому вони йдуть в першому масиві.', 0x766172206e2c6d3a696e74656765723b0d0a20202020612c623a61727261795b312e2e3130305d206f66206c6f6e67696e743b0d0a20202020692c6a3a696e74656765723b0d0a20202020663a626f6f6c65616e3b0d0a626567696e0d0a2020202072656164286e293b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a2020202072656164286d293b0d0a20202020666f72206a3a3d3120746f206e20646f207265616428625b6a5d293b0d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a2020202020202020663a3d747275653b0d0a2020202020202020666f72206a3a3d3120746f206d20646f0d0a202020202020202020696620615b695d3d625b6a5d207468656e0d0a202020202020202020202020663a3d66616c73653b0d0a202020202020202069662066207468656e20777269746528615b695d2c272027293b0d0a20202020656e643b0d0a656e642e, 'freepascal', 1),
(1007, 1, 6, 6, 'День народження Sirkadirov-а', '&lt;p&gt;Головний кухар вирішив влаштувати в Гімназії 28 День народження Sirkadirov-а. Для цього він приготував гімназистам N надзвичайно смачних піц і потай ухвалив, що перший, який завітав покуштувати поварську страву школяр повинен отримати найбільшу кількість смачних піц, а кожний наступний - строго менше, ніж попередній (кухареві дуже не подобалося, коли до приготовленого їм обіду спізнювалися і той змушений був остигати).&lt;/p&gt;\r\n&lt;p&gt;Звичайно, введене правило залишає істотне свавілля в числі піц, одержуваних черговим з\'явився гімназистом, і це число не в останню чергу залежатиме від ставлення Sirkadirov-а до гімназиста, а також від чарівних слів, вимовлених ним на честь Sirkadirov-а. Наприклад, 6 піц можуть бути в результаті розподілені по одній з наступних чотирьох схем: 3 + 2 + 1 (три піци першому з тих, хто прийшов школярів, дві - другого і одну - третього), 4 + 2, 5 + 1 та 6 (всі піци з\'їдає щасливчик, який прийшов першим).&lt;/p&gt;\r\n&lt;p&gt;Кухар просить вас написати програму, яка визначить, якою кількістю різних способів він може розподілити приготоване ласощі серед школярів.&lt;/p&gt;', 'Вхідний потік містить одне ціле число N - кількість приготованих\r\nкухарем піц (0 <= N <= 200).', 'Вихідний потік повинен містити одне ціле число типу longint (0 <= a <= 2 147 483 647), що дорівнює кількості можливих розподілів піц.', 0x76617220613a61727261795b302e2e3230305d206f6620636f6d703b0d0a20202020692c6a2c6e3a696e74656765723b0d0a626567696e0d0a2020202072656164286e293b0d0a2020202066696c6c6368617228612c73697a656f662861292c30293b0d0a20202020615b305d3a3d313b0d0a20202020666f72206a3a3d3120746f206e20646f20626567696e0d0a2020202020202020666f7220693a3d6e20646f776e746f206a20646f200d0a202020202020202020202020615b695d3a3d615b695d2b615b692d6a5d3b0d0a20202020656e643b0d0a20202020777269746528615b6e5d293b0d0a656e642e, 'freepascal', 1),
(1008, 1, 50, 19, 'Регулярні вирази', '&lt;p&gt;Потрібно визначити чи підходить задане слово під заданий шаблон. Шаблон задається великими латинськими буквами, знаками &quot;?&quot; - будь-який символ, &quot;*&quot; - будь-яка послідовність символів (навіть порожня).&lt;/p&gt;', 'У перших двох рядках записані шаблон і слово: в одному рядку записаний шаблон - послідовність великих\r\nлатинських букв, \"?\" і \"*\", в інший - слово, що складається тільки\r\nз великих латинських букв (рядки коротше 100 символів).', 'Вивести YES, якщо слово підходить або NO, якщо немає.', 0x636f6e7374206d61786c203d203236303b0d0a76617220692c6a2c6c312c6c323a696e74656765723b0d0a2020202073312c73322c73333a737472696e673b0d0a202020206d6179312c6d6179323a61727261795b302e2e6d61786c5d6f6620626f6f6c65616e3b0d0a0d0a66756e6374696f6e20776f726428733a737472696e67293a626f6f6c65616e3b0d0a76617220693a696e74656765723b0d0a626567696e0d0a20202020776f7264203a3d2066616c73653b0d0a20202020666f7220693a3d3120746f206c656e67746828732920646f0d0a20202020202020206966206e6f742028735b695d20696e205b2741272e2e275a275d29207468656e20657869743b0d0a20202020776f7264203a3d20747275653b0d0a656e643b0d0a0d0a626567696e0d0a20202020726561646c6e287331293b0d0a20202020726561646c6e287332293b0d0a20202020696620776f726428733229207468656e20626567696e0d0a20202020202020207333203a3d2073313b0d0a20202020202020207331203a3d2073323b0d0a20202020202020207332203a3d2073333b0d0a20202020656e643b0d0a202020206c313a3d206c656e677468287331293b207b20776f7264207d0d0a202020206c323a3d206c656e677468287332293b0d0a20202020666f72206a3a3d3020746f206c3120646f0d0a20202020202020206d6179315b6a5d203a3d206a3d303b0d0a20202020666f7220693a3d3120746f206c3220646f20626567696e0d0a20202020202020206d6179325b305d203a3d206d6179315b305d20616e6420282073325b695d203d20272a2720293b0d0a2020202020202020666f72206a3a3d3120746f206c3120646f20626567696e0d0a20202020202020202020202069662073325b695d203d20273f270d0a202020202020202020202020202020207468656e206d6179325b6a5d203a3d206d6179315b6a2d315d0d0a20202020202020202020202020202020656c73650d0a202020202020202020202020202020202020202069662073325b695d203d20272a270d0a2020202020202020202020202020202020202020202020207468656e206d6179325b6a5d3a3d6d6179315b6a5d206f72206d6179315b6a2d315d206f72206d6179325b6a2d315d0d0a202020202020202020202020202020202020202020202020656c7365206d6179325b6a5d3a3d6d6179315b6a2d315d20616e64202873315b6a5d203d2073325b695d293b0d0a2020202020202020656e643b0d0a20202020202020206d617931203a3d206d6179323b0d0a20202020656e643b0d0a202020206966206d6179315b6c315d0d0a20202020202020207468656e207772697465282759455327290d0a2020202020202020656c736520777269746528274e4f27293b0d0a656e642e, 'freepascal', 1),
(1009, 1, 2, 3, 'Шахова туга', '&lt;p&gt;Дано координати двох полів шахової дошки (координати клітини - це 2 числа від 1 до 8: номер стовпця і номер рядка) Одного кольору ці клітини на шахівниці чи ні? Вивести у вихідний потік ЄДИНИЙ РЯДОК, що містить YES, якщо вони одного кольору, і NO у протилежному випадку.&lt;/p&gt;', 'У вхідному потоці дано 4 числа типу byte (від 0 до 255).', 'Вивести у вихідний потік\r\nЄДИНИЙ РЯДОК, що містить YES, якщо вони одного кольору, і NO у протилежному випадку.', 0x7661722078312c78323a627974653b0d0a2020202079312c79323a627974653b0d0a626567696e0d0a20202020726561642878312c79312c78322c7932293b0d0a202020206966202878312b79312b78322b793229206d6f642032203c3e20300d0a20202020202020207468656e20777269746528274e4f27290d0a2020202020202020656c7365207772697465282759455327293b0d0a656e642e, 'freepascal', 1),
(1010, 1, 10, 8, 'Розпакування рядків', '&lt;p&gt;Будемо розглядати тільки рядки, що складаються з великих латинських букв. Наприклад, розглянемо рядок AAAABCCCCCDDDD. Довжина цього рядка дорівнює 14. Оскільки рядок складається тільки з латинських букв, що повторюються, символи можуть бути видалені і замінені числами, що визначають кількість повторень. Таким чином, даний рядок може бути представлена як 4AB5C4D. Довжина такого рядка 7. Описаний метод ми назвемо упаковкою рядки. Напишіть програму, яка бере упакований рядок і відновлює по ньому початковий рядок.&lt;/p&gt;', 'Вхідний потік містить один упакований рядок. У рядку можуть зустрічатися тільки конструкції виду nA, де n - кількість повторень символу (ціле число від 2 до 99), а A - заголовна латинська буква, або конструкції виду A, тобто символ без числа, що визначає кількість повторень. Максимальна довжина рядка не перевищує 80 символів.', 'У вихідний потік виведіть відновлений рядок. При цьому рядок повинен бути розбитий на рядки довжиною рівно по 40 символів (за винятком останнього, який може містити менше 40 символів).', 0x76617220733a737472696e673b0d0a20202020692c6b3a696e74656765723b0d0a626567696e0d0a20202020726561646c6e2873293b0d0a20202020693a3d313b0d0a202020207768696c6520693c3d6c656e67746828732920646f20626567696e0d0a20202020202020206b3a3d303b0d0a2020202020202020207768696c652028735b695d203e3d2027302729616e6428735b695d203c3d2739272920646f20626567696e0d0a2020202020202020202020206b3a3d6b2a31303b0d0a2020202020202020202020206b3a3d6b2b6f726428735b695d29202d206f726428273027293b200d0a202020202020202020202020696e632869293b0d0a2020202020202020656e643b0d0a20202020202020206966206b3d30207468656e20777269746528735b695d290d0a2020202020202020656c736520626567696e0d0a2020202020202020202020207768696c65206b3e3020646f20626567696e0d0a20202020202020202020202020202020646563286b293b0d0a20202020202020202020202020202020777269746528735b695d293b20202020200d0a202020202020202020202020656e643b0d0a2020202020202020656e643b0d0a2020202020202020696e632869293b0d0a20202020656e643b0d0a20656e642e, 'freepascal', 1),
(1011, 1, 3, 6, 'Кількість перед парними', '&lt;p&gt;&lt;span lang=&quot;uk&quot;&gt;Знайдіть кількість елементів масиву, після яких знаходиться парне число.&lt;/span&gt;&lt;/p&gt;\r\n&lt;p&gt;&lt;span lang=&quot;uk&quot;&gt;============&lt;/span&gt;&lt;/p&gt;\r\n&lt;p&gt;&lt;span lang=&quot;uk&quot;&gt;Найдите количество элементов массива, после которых находится четное число.&lt;/span&gt;&lt;/p&gt;', 'У першому рядку дано натуральне число N (1 ≤ N ≤100) - кількість елементів масиву.\r\nУ другому рядку через пропуск перераховані всі елементи масиву (-32000 ≤ a [i] ≤ 32000).\r\n============\r\nВ первой строке дано натуральное число N (1 ≤ N ≤100) - количество элементов массива.\r\nВо второй строке через пробел перечислены все элементы массива (-32000 ≤ a [i] ≤ 32000).', 'Єдине натуральне число.\r\n============\r\nЕдинственное натуральное число', 0x76617220613a6172726179205b312e2e3130305d206f6620696e74656765723b0d0a202020206e2c692c733a696e74656765723b0d0a0d0a626567696e0d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a20202020733a3d303b0d0a20202020666f7220693a3d3220746f206e20646f200d0a202020202020202069662028615b695d206d6f6420323d3029207468656e20733a3d732b313b0d0a2020202077726974652873293b0d0a656e642e, 'freepascal', 1),
(1012, 1, 3, 6, 'Не додатні сусіди', '&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;Знайдіть суму елементів масиву, у яких є не додатній сусід.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;================&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;Найдите сумму элементов массива,&amp;nbsp;у которых&amp;nbsp;есть не положительный сосед.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;', 'У першому рядку дано натуральне число N (1 ≤ N ≤100) - кількість елементів масиву. У другому рядку через пропуск перераховані всі елементи масиву (-32000 ≤ a [i] ≤ 32000).\r\n================\r\nВ первой строке дано натуральное число N (1 ≤ N ≤100) - количество элементов массива. Во второй строке через пробел перечислены все элементы массива (-32000 ≤ a [i] ≤ 32000).', 'Єдине ціле число.\r\n================\r\nЕдинственное целое число.', 0x76617220613a6172726179205b302e2e3130315d206f6620696e74656765723b0d0a202020206e2c693a696e74656765723b0d0a20202020733a6c6f6e67696e743b0d0a0d0a626567696e0d0a20202020726561646c6e286e293b0d0a20202020615b305d3a3d313b0d0a20202020615b6e2b315d3a3d313b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a20202020733a3d303b0d0a20202020666f7220693a3d3120746f206e20646f200d0a202020202020202069662028615b692d315d3c3d3029206f722028615b692b315d3c3d3029207468656e20733a3d732b615b695d3b0d0a2020202077726974652873293b0d0a656e642e0d0a, 'freepascal', 1),
(1013, 1, 5, 6, 'Среднее арифметическое непростых', '&lt;p&gt;Найти среднее арифметическое первых k не простых чисел в заданном одномерном массиве. Гарантируется, что в массиве не меньше k простых чисел.&lt;/p&gt;', 'В первой строке дано число N - количество элементов массива (0 < N < 101) и целое число k (0 < k <101).\r\nВо второй строке перечислены элементы массива через пробел (-32000 < а[i] < 32000)', 'Единственное вещественное число с точностью до двух знаков после запятой.', 0x66756e6374696f6e20636865636b2028613a696e743634293a626f6f6c65616e3b0d0a0976617220663a626f6f6c65616e3b0d0a2020202009643a696e7436343b0d0a09626567696e0d0a2020202009663a3d613e313b0d0a2020202020202020643a3d323b0d0a20202020202020207768696c652028662920616e642028642a643c3d612920646f20626567696e0d0a202020202020202009663a3d61206d6f6420643c3e303b0d0a202020202020202020202020643a3d642b313b0d0a202020202020202009656e643b0d0a2020202020202020636865636b3a3d663b0d0a20202020656e643b0d0a0d0a76617220613a6172726179205b312e2e313030303030305d206f6620696e7436343b0d0a09692c6e2c732c6b2c633a696e7436343b0d0a0d0a626567696e0d0a09726561646c6e286e2c6b293b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a20202020733a3d303b0d0a20202020633a3d303b0d0a20202020666f7220693a3d3120746f206e20646f200d0a202020200969662028633c6b2920616e6420286e6f7428636865636b28615b695d292929207468656e20626567696e0d0a202020202020202009733a3d732b615b695d3b0d0a202020202020202020202020633a3d632b313b0d0a202020202020202020202020656e643b0d0a2020202077726974652028732f6b3a303a32293b0d0a656e642e0d0a, 'freepascal', 1),
(1014, 1, 3, 6, 'Среднее арифметическое минимумов', '&lt;p style=&quot;text-align: left;&quot;&gt;Найти среднее арифметическое минимумов данного массива.&lt;/p&gt;', 'В первой строке дано число N - количество элементов массива (0 < N < 101) и целое число k (0 < k <101). Во второй строке перечислены элементы массива через пробел (-32000 < а[i] < 32000).', 'Единственное вещественное число с точностью до двух знаков после запятой.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a20202020692c6e3a696e74656765723b0d0a202020206d696e3a7265616c3b0d0a626567696e0d0a202020200d0a20202020726561646c6e286e293b0d0a202020200d0a202020206d696e3a3d33323030303b0d0a202020200d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a20202020202020200d0a20202020202020207265616428615b695d293b0d0a2020202020202020696620615b695d203c206d696e207468656e206d696e3a3d615b695d3b0d0a20202020202020200d0a20202020656e643b0d0a202020200d0a202020207772697465286d696e3a303a32293b0d0a202020200d0a656e642e, 'freepascal', 1),
(1015, 1, 3, 6, 'Наибольший элемент', '&lt;p&gt;Найти наибольший элемент числовой последовательности.&lt;/p&gt;', 'Во входном потоке в первой строке задано целое число N - количество элементов целочисленной числовой последовательности (0 < N < 100). Во второй строке через пробел перечислены значения элементов числовой последовательности. Значения элементов по модулю не превышают 30000.', 'В выходной поток вывести единственное целое число.', 0x696d706f7274206a6176612e7574696c2e2a3b0d0a0d0a636c617373204d61696e436c617373207b0d0a20200d0a202020207075626c69632073746174696320766f6964206d61696e28537472696e675b5d206172677329207b0d0a2020090d0a20202020202020205363616e6e6572207363203d206e6577205363616e6e65722853797374656d2e696e293b0d0a20202020202020200d0a2020202020202020696e74206e203d2073632e6e657874496e7428293b0d0a20202020202020200d0a2020202020202020696e74206d6178203d202d33303030303b0d0a20202020202020200d0a2020202020202020666f722028696e742069203d20313b2069203c3d206e3b20692b2b29207b0d0a2020202020202020202020200d0a202020202020202020202020696e742074203d2073632e6e657874496e7428293b0d0a2020202020202020202020200d0a202020202020202020202020696620286d6178203c2074290d0a202020202020202020202020202020206d6178203d20743b0d0a2020202020200d0a20202020202020207d0d0a20202020202020200d0a202020202020202053797374656d2e6f75742e7072696e746c6e286d6178293b0d0a20202020202020200d0a202020207d0d0a202020200d0a7d, 'freepascal', 1),
(1016, 1, 3, 6, 'Индекс первого наибольшего', '&lt;p&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 16px; text-align: justify;&quot;&gt;Найти индекс первого наибольшего элемента числовой последовательности.&lt;/span&gt;&lt;/p&gt;', 'Во входном потоке в первой строке задано целое число N - количество элементов целочисленной числовой последовательности (0 < N < 100). Во второй строке через пробел перечислены значения элементов числовой последовательности. Значения элементов по модулю не превышают 30000.', 'В выходной поток вывести единственное целое число.', 0x76617220613a6172726179205b312e2e3130305d206f6620696e74656765723b0d0a202020206e2c692c6d696e3a696e74656765723b0d0a0d0a626567696e0d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a202020206d696e3a3d313b0d0a20202020666f7220693a3d3220746f206e20646f200d0a202020202020202069662028615b695d203e20615b6d696e5d29207468656e206d696e3a3d693b0d0a202020207772697465286d696e293b0d0a656e642e0d0a, 'freepascal', 1),
(1017, 1, 3, 6, 'Индекс первого наименьшего', '&lt;p&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 16px; text-align: justify;&quot;&gt;Найти индекс первого наименьшего элемента числовой последовательности.&lt;/span&gt;&lt;/p&gt;', 'Во входном потоке в первой строке задано целое число N - количество элементов целочисленной числовой последовательности (0 < N < 100). Во второй строке через пробел перечислены значения элементов числовой последовательности. Значения элементов по модулю не превышают 30000.', 'В выходной поток вывести единственное целое число.', 0x76617220613a6172726179205b312e2e3130305d206f6620696e74656765723b0d0a202020206e2c692c6d696e3a696e74656765723b0d0a0d0a626567696e0d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a202020206d696e3a3d313b0d0a20202020666f7220693a3d3220746f206e20646f200d0a202020202020202069662028615b695d203c20615b6d696e5d29207468656e206d696e3a3d693b0d0a202020207772697465286d696e293b0d0a656e642e0d0a, 'freepascal', 1),
(1018, 1, 4, 6, 'Удаление нулей', '&lt;p&gt;В заданном линейном массиве удалить все нулевые элементы. Если будут удалены все элементы, то вывести NO.&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов целочисленного массива (N < 100) \r\nВо второй строке перечислены через пробел значения элементов массива, по модулю не превышающие 30000.', 'В выходной поток вывести в строку через пробел целые числа или NO.', 0x7479706520746172723d6172726179205b312e2e313030305d206f6620696e74656765723b0d0a0d0a70726f636564757265207265616431202876617220613a746172723b20766172206e3a696e7465676572293b0d0a0976617220693a696e74656765723b0d0a09626567696e0d0a2020202009726561646c6e20286e293b0d0a2020202020202020666f7220693a3d3120746f206e20646f20726561642028615b695d293b0d0a20202020656e643b0d0a0d0a70726f6365647572652064656c202876617220613a746172723b766172206e3a696e74656765723b20693a696e7465676572293b0d0a09766172206a3a696e74656765723b0d0a09626567696e0d0a20202020096e3a3d6e2d313b0d0a2020202020202020666f72206a3a3d6920746f206e20646f0d0a202020202020202009615b6a5d3a3d615b6a2b315d3b0d0a2020202020202020656e643b0d0a20202020202020200d0a70726f63656475726520726573202876617220613a746172723b20766172206e3a696e7465676572293b0d0a0976617220692c6a3a696e74656765723b0d0a20202020626567696e0d0a2020202009693a3d313b0d0a20202020202020207768696c6520693c3d6e20646f0d0a202020202020202009696620615b695d3d30207468656e2064656c2028612c6e2c69290d0a2020202020202020202020202020656c736520693a3d692b313b0d0a2020202020202020656e643b0d0a0d0a70726f63656475726520777269746531202876617220613a746172723b20766172206e3a696e7465676572293b0d0a0976617220693a696e74656765723b0d0a09626567696e0d0a20202020202020206966206e3d30207468656e2077726974652028274e4f27290d0a202020202020202009656c736520666f7220693a3d3120746f206e20646f2077726974652028615b695d2c272027293b0d0a20202020656e643b0d0a0d0a76617220613a746172723b0d0a096e3a696e74656765723b0d0a626567696e0d0a0972656164312028612c6e293b0d0a202020207265732028612c6e293b0d0a202020207772697465312028612c6e293b0d0a656e642e0d0a, 'freepascal', 1),
(1019, 1, 4, 6, 'Удаление положительных', '&lt;p&gt;В заданном линейном массиве удалить все положительные элементы.&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов целочисленного массива (N < 100) \r\nВо второй строке - перечислены через пробел значения элементов массива, не превышающие по модулю 30000.', 'Вывести в строку, через пробел элементы преобразованного массива.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a20202020692c6e3a696e74656765723b0d0a20202020636f756e743a696e74656765723b0d0a626567696e0d0a202020200d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f0d0a20202020202020207265616428615b695d293b0d0a202020200d0a20202020636f756e743a3d303b0d0a202020200d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a20202020202020200d0a2020202020202020696620615b695d203e20300d0a2020202020202020202020207468656e20636f756e743a3d636f756e742b310d0a202020202020202020202020656c736520777269746528615b695d2c20272027293b0d0a20202020202020200d0a20202020656e643b0d0a202020200d0a20202020696620636f756e74203d206e0d0a20202020202020207468656e2077726974656c6e28274e4f27293b0d0a202020200d0a656e642e, 'freepascal', 1),
(1020, 1, 4, 6, 'Удаление отрицательных', '&lt;p&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 16px; text-align: justify;&quot;&gt;В заданном линейном массиве удалить все&amp;nbsp;отрицательные элементы.&lt;/span&gt;&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов целочисленного массива (N < 100) \r\nВо второй строке - перечислены через пробел значения элементов массива, не превышающие по модулю 30000.', 'Вывести в строку, через пробел элементы преобразованного массива.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a20202020692c6e3a696e74656765723b0d0a20202020636f756e743a696e74656765723b0d0a626567696e0d0a202020200d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f0d0a20202020202020207265616428615b695d293b0d0a202020200d0a20202020636f756e743a3d303b0d0a202020200d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a20202020202020200d0a2020202020202020696620615b695d203c20300d0a2020202020202020202020207468656e20636f756e743a3d636f756e742b310d0a202020202020202020202020656c736520777269746528615b695d2c20272027293b0d0a20202020202020200d0a20202020656e643b0d0a202020200d0a20202020696620636f756e74203d206e0d0a20202020202020207468656e2077726974656c6e28274e4f27293b0d0a202020200d0a656e642e, 'freepascal', 1);

-- --------------------------------------------------------

--
-- Структура таблицы `spm_problems_categories`
--

DROP TABLE IF EXISTS `spm_problems_categories`;
CREATE TABLE IF NOT EXISTS `spm_problems_categories` (
  `id` smallint(5) UNSIGNED NOT NULL AUTO_INCREMENT,
  `sort` smallint(5) UNSIGNED DEFAULT NULL,
  `name` tinytext CHARACTER SET utf8 COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `spm_problems_categories`
--

INSERT INTO `spm_problems_categories` (`id`, `sort`, `name`) VALUES
(1, 1, 'Лінійні'),
(3, 2, 'Розгалуження'),
(4, 3, 'Цикли з параметром'),
(5, 4, 'Цикли з умовою'),
(6, 6, 'Одномірні массиви'),
(7, 7, 'Багатомірні массиви'),
(8, 8, 'Рядки'),
(9, 9, 'Арифметика'),
(10, 10, 'Динаміка'),
(11, 11, 'Рекурсія'),
(12, 12, 'Моделювання'),
(13, 13, 'Теорія графів'),
(14, 14, 'Множини'),
(15, 15, 'Комбінаторика'),
(16, 16, 'Списки'),
(17, 17, 'Процедури та функції'),
(18, 18, 'Цікава інформатика'),
(19, 19, 'Занимательная физика'),
(20, 20, 'Обов\'язковий мінімум'),
(21, 21, 'Олімпіади, турніри');

-- --------------------------------------------------------

--
-- Структура таблицы `spm_problems_tests`
--

DROP TABLE IF EXISTS `spm_problems_tests`;
CREATE TABLE IF NOT EXISTS `spm_problems_tests` (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `problemId` bigint(20) UNSIGNED NOT NULL,
  `input` longblob,
  `output` longblob,
  `memoryLimit` bigint(20) UNSIGNED NOT NULL DEFAULT '20971520',
  `timeLimit` smallint(5) UNSIGNED NOT NULL DEFAULT '200',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `spm_problems_tests`
--

INSERT INTO `spm_problems_tests` (`id`, `problemId`, `input`, `output`, `memoryLimit`, `timeLimit`) VALUES
(2, 1002, 0x3332303030203332303030, 0x3634303030, 20971520, 150),
(3, 1002, 0x302030, 0x30, 20971520, 150),
(4, 1002, 0x2d3332303030202d3332303030, 0x2d3634303030, 20971520, 150),
(5, 1002, 0x323730372031313034, 0x33383131, 20971520, 150),
(6, 1003, 0x302030, 0x302e303030, 30971520, 300),
(7, 1003, 0x2d312e33323520312e333235, 0x302e303030, 30971520, 300),
(8, 1003, 0x2d33303030302e3120302e31, 0x2d33303030302e303030, 30971520, 300),
(9, 1003, 0x352e323320372e313235, 0x31322e333535, 30971520, 300),
(10, 1004, 0x350d0a2d3332303030203334352032373037203131303420353637, 0x2d33323030300d0a3334350d0a323730370d0a313130340d0a353637, 20971520, 200),
(11, 1004, 0x30, '', 20971520, 50),
(12, 1004, 0x3130300d0a36353620353737203535372035373720343435203131203332303030202d3332303030202d3536203434352036353620353737203535372035373720343435203131203332303030202d3332303030202d3536203434352036353620353737203535372035373720343435203131203332303030202d3332303030202d3536203434352036353620353737203535372035373720343435203131203332303030202d3332303030202d3536203434352036353620353737203535372035373720343435203131203332303030202d3332303030202d3536203434352036353620353737203535372035373720343435203131203332303030202d3332303030202d3536203434352036353620353737203535372035373720343435203131203332303030202d3332303030202d3536203434352036353620353737203535372035373720343435203131203332303030202d3332303030202d3536203434352036353620353737203535372035373720343435203131203332303030202d3332303030202d3536203434352036353620353737203535372035373720343435203131203332303030202d3332303030202d353620343435, 0x3635360d0a3537370d0a3535370d0a3537370d0a3434350d0a31310d0a33323030300d0a2d33323030300d0a2d35360d0a3434350d0a3635360d0a3537370d0a3535370d0a3537370d0a3434350d0a31310d0a33323030300d0a2d33323030300d0a2d35360d0a3434350d0a3635360d0a3537370d0a3535370d0a3537370d0a3434350d0a31310d0a33323030300d0a2d33323030300d0a2d35360d0a3434350d0a3635360d0a3537370d0a3535370d0a3537370d0a3434350d0a31310d0a33323030300d0a2d33323030300d0a2d35360d0a3434350d0a3635360d0a3537370d0a3535370d0a3537370d0a3434350d0a31310d0a33323030300d0a2d33323030300d0a2d35360d0a3434350d0a3635360d0a3537370d0a3535370d0a3537370d0a3434350d0a31310d0a33323030300d0a2d33323030300d0a2d35360d0a3434350d0a3635360d0a3537370d0a3535370d0a3537370d0a3434350d0a31310d0a33323030300d0a2d33323030300d0a2d35360d0a3434350d0a3635360d0a3537370d0a3535370d0a3537370d0a3434350d0a31310d0a33323030300d0a2d33323030300d0a2d35360d0a3434350d0a3635360d0a3537370d0a3535370d0a3537370d0a3434350d0a31310d0a33323030300d0a2d33323030300d0a2d35360d0a3434350d0a3635360d0a3537370d0a3535370d0a3537370d0a3434350d0a31310d0a33323030300d0a2d33323030300d0a2d35360d0a343435, 20971520, 200),
(13, 1005, 0x370d0a36203520342033203220312030, 0x30, 31457280, 200),
(14, 1005, 0x360d0a3120322033203420352036, 0x31, 31457280, 200),
(15, 1005, 0x360d0a3320382037203620352034, 0x33, 31457280, 200),
(16, 1005, 0x380d0a32203520312036202d33203520322035, 0x2d33, 31457280, 200),
(17, 1005, 0x3130300d0ax32, 31457280, 200),
(18, 1006, 0x370d0a33203120332034203220342031320d0a360d0a3420313520343320312031352031, 0x3320332032203132, 20971520, 100),
(19, 1006, 0x36330d0a2d37353420313532203432362038373820353339202d323631202d35373420313738202d363530202d3735322036363720313631202d3731202d333131202d3735332034333920373739202d3438202d393831203735342035393820393233202d34383920313931202d363233202d3234382038353620343635202d3230312032353320313132202d32353320343734202d373031202d33323020363035203438392035373520373131202d34313020383635202d38333120333832202d393234203239202d32303320353638202d333539202d39203831202d3436312035343520373931203434322036303220363339202d32333920383530202d383331202d39303920353830202d35313720383032200d0a35350d0a2d343239203239322037353620373137202d36393520323433202d363436202d32353020323634202d383630202d39353220323232202d3738322034363520313436202d37333520363732202d31303030203230352035343220393131202d333032202d373831202d353032202d31303520323138202d3639352038323920393031202d353033203734332031353920363738202d353534203830372034333720353830202d393430203238312036303520383439203735382038323020313039202d343635202d373932202d33383220323231202d31313520343837202d363030202d31363320343536203733382034353820, 0x2d37353420313532203432362038373820353339202d323631202d35373420313738202d363530202d3735322036363720313631202d3731202d333131202d3735332034333920373739202d3438202d393831203735342035393820393233202d34383920313931202d363233202d32343820383536202d3230312032353320313132202d32353320343734202d373031202d333230203438392035373520373131202d34313020383635202d38333120333832202d393234203239202d32303320353638202d333539202d39203831202d3436312035343520373931203434322036303220363339202d32333920383530202d383331202d393039202d35313720383032, 20971520, 100),
(20, 1006, 0x31350d0a31203220332034203520362037203820392031302031312031322031332031342031350d0a390d0a3135203133203131203920372035203320312038, 0x3220342036203130203132203134, 20971520, 100),
(21, 1008, 0x5349524b414449524f560d0a532a4b41443f524f56, 0x594553, 20971520, 200),
(22, 1008, 0x4a4a48534648464a484a464a484a4b4b4146414a4648530d0a2a, 0x594553, 20971520, 200),
(23, 1008, 0x4a4a48534648464a484a464a484a4b4b4146414a4648530d0a3f, 0x4e4f, 20971520, 200),
(24, 1008, 0x4142430d0a3f423f, 0x594553, 20971520, 200),
(25, 1007, 0x31, 0x31, 20971520, 100),
(26, 1007, 0x3235, 0x313432, 20971520, 100),
(27, 1007, 0x3635, 0x3138323030, 20971520, 200),
(28, 1007, 0x3732, 0x3336333532, 20971520, 200),
(29, 1007, 0x313730, 0x3734323336333834, 20971520, 200),
(30, 1007, 0x323030, 0x343837303637373436, 20971520, 200),
(31, 1009, 0x31203120332033, 0x594553, 20971520, 100),
(32, 1009, 0x31203320362036, 0x594553, 20971520, 100),
(33, 1009, 0x32203220312031, 0x594553, 20971520, 100),
(34, 1009, 0x32203420352037, 0x594553, 20971520, 100),
(35, 1009, 0x31203220332036, 0x594553, 20971520, 100),
(36, 1009, 0x34203120352032, 0x594553, 20971520, 100),
(37, 1009, 0x31203220342036, 0x4e4f, 20971520, 100),
(38, 1009, 0x36203620322035, 0x4e4f, 20971520, 100),
(39, 1009, 0x34203720382032, 0x4e4f, 20971520, 100),
(45, 1010, 0x3241374d4241, 0x41414d4d4d4d4d4d4d4241, 20971520, 200),
(46, 1010, 0x414243444546, 0x414243444546, 20971520, 200),
(47, 1010, 0x3430413830423245, 0x4141414141414141414141414141414141414141414141414141414141414141414141414141414142424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424545, 20971520, 250),
(48, 1010, 0x374c375a374d3741, 0x4c4c4c4c4c4c4c5a5a5a5a5a5a5a4d4d4d4d4d4d4d41414141414141, 20971520, 200),
(49, 1010, 0x393041393042, 0x414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242, 20971520, 250),
(50, 1001, '', 0x48656c6c6f2c20776f726c6421, 20971520, 200),
(51, 1001, 0x303030, 0x48656c6c6f2c20776f726c6421, 20971520, 200),
(52, 1001, 0x414141, 0x48656c6c6f2c20776f726c6421, 20971520, 200),
(53, 1002, 0x312030, 0x31, 20971520, 200),
(54, 1002, 0x302031, 0x31, 20971520, 200),
(55, 1002, 0x35203137, 0x3232, 20971520, 200),
(56, 1002, 0x352035, 0x3130, 20971520, 200),
(57, 1002, 0x323030302032303030, 0x34303030, 20971520, 200),
(58, 1002, 0x3330303030202d3330303030, 0x30, 20971520, 200),
(59, 1002, 0x3120353030, 0x353031, 20971520, 200),
(60, 1002, 0x3530302031, 0x353031, 20971520, 200),
(61, 1002, 0x3732302032, 0x373232, 20971520, 200),
(62, 1002, 0x38303020383030, 0x31363030, 20971520, 200),
(63, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f56, 0x594553, 20971520, 200),
(64, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a5349524b414449524f3f5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449523f565349524b414449524f565349524b414449524f565349524b414449524f565349524b4144492a4f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f3f, 0x594553, 20971520, 200),
(65, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b4144, 0x4e4f, 20971520, 200),
(66, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a7364647364736164647361647361, 0x4e4f, 20971520, 200),
(67, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f562a, 0x594553, 20971520, 200),
(68, 1008, 0x5945530d0a593f53, 0x594553, 20971520, 200),
(69, 1008, 0x5945530d0a4e4f, 0x4e4f, 20971520, 200),
(70, 1008, 0x313332333433343534333634353635343635343635343634353634353635343635343635343635343635343635343635343635343635343534363534360d0a3133322a342a34353f3534362a3536343536352a35342a362a34362a3436, 0x594553, 20971520, 200),
(71, 1008, 0x3132333435363738393071776572747975696f70310d0a313233343536373839303f776572747975696f70, 0x4e4f, 20971520, 200),
(72, 1008, 0x310d0a31, 0x594553, 20971520, 200),
(73, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f562a, 0x594553, 20971520, 200),
(74, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f562a, 0x594553, 20971520, 200),
(75, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f562a, 0x594553, 20971520, 200),
(76, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f562a, 0x594553, 20971520, 200),
(77, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f562a, 0x594553, 20971520, 200),
(78, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f562a, 0x594553, 20971520, 200),
(79, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a31, 0x4e4f, 20971520, 200),
(80, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a363535363435363534363534353634363534353634, 0x4e4f, 20971520, 200),
(81, 1008, 0x5349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f565349524b414449524f560d0a3f3f3f3f3f3f3f3f, 0x4e4f, 20971520, 200),
(82, 1011, 0x370d0a31203220332034203520362037, 0x33, 20971520, 200),
(83, 1011, 0x310d0a32, 0x30, 20971520, 200),
(84, 1011, 0x31300d0a2d3132342031323120313235352036333220333632203332303030202d3332303030203332303030202d312030, 0x36, 20971520, 200),
(85, 1011, 0x380d0a31302031203220332034203520362037, 0x33, 20971520, 200),
(86, 1011, 0x32300d0a313234203233343920333234203632333430203233202d323334362032202d3132343520313233202d313234202d31322035203132202d31323536202d31323132202d3531322035373334202d3233343620333432333436202d313235, 0x3133, 20971520, 200),
(87, 1012, 0x370d0a31202d342031322031322031202d35202d31, 0x38, 20971520, 200),
(88, 1012, 0x32300d0a3132342032333439203332342036333430203233202d323334362032202d3132343520313233202d313234202d31322035203132202d31323536202d31323132202d3531322035373334202d323334362033323436202d313235, 0x36303239, 20971520, 200),
(89, 1012, 0x310d0a31, 0x30, 20971520, 200),
(90, 1012, 0x360d0a2d3332303030202d333230303020202d31202d31202d31203332303030, 0x2d3332303033, 20971520, 200),
(93, 1012, 0x31300d0a2d3132333520323334363520323436202d31323520323436323334203020313230203133302030203020, 0x37393236, 20971520, 200),
(94, 1016, 0x310d0a3330303030, 0x3330303030, 31457280, 200),
(95, 1016, 0x31300d0a313030303020353030302035202d333030303020302031203534353620333420313233342035363738, 0x3130303030, 31457280, 200),
(96, 1016, 0x3130300d0a31353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362032393030302031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362031353932362030203135393236203135393236203135393236203135393236203135393236203135393236203135393236203135393236203135393236203135393236202d3330303030203135393236203135393236203135393236203135393236203135393236203135393236203135393236203135393236203135393236203135393236203135393236, 0x3239303030, 31457280, 200),
(97, 1014, 0x370d0a36203520342033203220312030, 0x302e3030, 31457280, 200),
(98, 1014, 0x360d0a3120322033203420352036, 0x312e3030, 31457280, 200),
(99, 1014, 0x360d0a3320382037203620352034, 0x332e3030, 31457280, 200),
(100, 1014, 0x380d0a32203520312036202d33203520322035, 0x2d332e3030, 31457280, 200),
(101, 1014, 0x3130300d0ax322e3030, 31457280, 200),
(103, 1019, 0x360d0a35203120352031202d33202d33, 0x31, 31457280, 200),
(104, 1019, 0x35340d0a3539343220313337373220323230333320363537362032323930382032383732203232323234202d3438383720373930382039333337202d37343030202d33393935202d3132393538203235303733202d3238333731203239363734202d3134353530202d37343630202d313433302031383637302031393937382031383439202d313238322034333534202d36383632203237323338203231353039202d3237343534202d3130343037202d32363432342039343833202d3330373037202d38343333203231323837203239323537203137383032202d3233303138203233363830203233363835203330363331202d31363930203139313436203139323538202d323436362031333130203137393533203131343438202d323434333120313431323020383935342035323439202d32323832362032333931203238343538, 0x3430, 31457280, 200),
(105, 1019, 0x3130300d0a33313234203539343220313337373220323230333320363537362032323930382032383732203232323234202d3438383720373930382039333337202d37343030202d33393935202d3132393538203235303733202d3238333731203239363734202d3134353530202d37343630202d313433302031383637302031393937382031383439202d313238322034333534202d36383632203237323338203231353039202d3237343534202d3130343037202d32363432342039343833202d3330373037202d38343333203231323837203239323537203137383032202d3233303138203233363830203233363835203330363331202d31363930203139313436203139323538202d323436362031333130203137393533203131343438202d323434333120313431323020383935342035323439202d323238323620323339312032383435382031363535312031333938202d3235323232202d35343632202d31363930202d3135303639202d3230303735203137353530203135313632202d32383037202d31383134312034333739202d3233333437202d3330373938202d31313235352037353238202d32323432312037313734202d31373737322037343833202d37323635203238333939203235373636203131363336202d33323034202d383939322037323336202d34303330203235373530203132363438202d3235363437202d32383134362033303036372031303637332039383030203130393230202d3231303632202d3138353336202d39303739202d3233373439203136303433202d31313831332036393031202d38373233202d3131313937, 0x3431, 31457280, 200),
(106, 1019, 0x37300d0a3332303030203539343220313337373220323230333320363537362032323930382032383732203232323234202d3438383720373930382039333337202d37343030202d33393935202d3132393538203235303733202d3238333731203239363734202d3134353530202d37343630202d313433302031383637302031393937382031383439202d313238322034333534202d36383632203237323338203231353039202d3237343534202d3130343037202d32363432342039343833202d3330373037202d38343333203231323837203239323537203137383032202d3233303138203233363830203233363835203330363331202d31363930203139313436203139323538202d323436362031333130203137393533203131343438202d323434333120313431323020383935342035323439202d323238323620323339312032383435382031363535312031333938202d3235323232202d35343632202d31363930202d3135303639202d3230303735203137353530203135313632202d32383037202d31383134312034333739202d3233333437202d3330373938202d3131323535, 0x31, 31457280, 200),
(130, 1020, 0x350d0a342033203220312031, 0x34, 20971520, 200),
(131, 1020, 0x32300d0a33313234203539343220313337373220323230333320363537362032323930382032383732203232323234202d3438383720373930382039333337202d37343030202d33393935202d3132393538203235303733202d3238333731203239363734202d3134353530202d37343630202d31343330, 0x3136, 20971520, 200),
(132, 1020, 0x3130300d0a2d3332303030203539343220313337373220323230333320363537362032323930382032383732203232323234202d3438383720373930382039333337202d37343030202d33393935202d3132393538203235303733202d3238333731203239363734202d3134353530202d37343630202d313433302031383637302031393937382031383439202d313238322034333534202d36383632203237323338203231353039202d3237343534202d3130343037202d32363432342039343833202d3330373037202d38343333203231323837203239323537203137383032202d3233303138203233363830203233363835203330363331202d31363930203139313436203139323538202d323436362031333130203137393533203131343438202d323434333120313431323020383935342035323439202d323238323620323339312032383435382031363535312031333938202d3235323232202d35343632202d31363930202d3135303639202d3230303735203137353530203135313632202d32383037202d31383134312034333739202d3233333437202d3330373938202d31313235352037353238202d32323432312037313734202d31373737322037343833202d37323635203238333939203235373636203131363336202d33323034202d383939322037323336202d34303330203235373530203132363438202d3235363437202d32383134362033303036372031303637332039383030203130393230202d3231303632202d3138353336202d39303739202d3233373439203136303433202d31313831332036393031202d38373233202d3332303030, 0x31, 20971520, 200),
(133, 1020, 0x35300d0a33313234203539343220313337373220323230333320363537362032323930382032383732203232323234202d3438383720373930382039333337202d37343030202d33393935202d3132393538203235303733202d3238333731203239363734202d3134353530202d37343630202d313433302031383637302031393937382031383439202d313238322034333534202d36383632203237323338203231353039202d3237343534202d3130343037202d32363432342039343833202d3330373037202d38343333203231323837203239323537203137383032202d3233303138203233363830203233363835203330363331202d31363930203139313436203139323538202d323436362031333130203137393533203131343438202d3234343331203134313230, 0x3333, 20971520, 200),
(134, 1013, 0x3520320d0a322033203120352034, 0x322e3530, 20971520, 200),
(135, 1013, 0x31303020320d0a31203539343220313337373220323230333320363537362032323930382032383732203232323234202d3438383720373930382039333337202d37343030202d33393935202d3132393538203235303733202d3238333731203239363734202d3134353530202d37343630202d313433302031383637302031393937382031383439202d313238322034333534202d36383632203237323338203231353039202d3237343534202d3130343037202d32363432342039343833202d3330373037202d38343333203231323837203239323537203137383032202d3233303138203233363830203233363835203330363331202d31363930203139313436203139323538202d323436362031333130203137393533203131343438202d323434333120313431323020383935342035323439202d323238323620323339312032383435382031363535312031333938202d3235323232202d35343632202d31363930202d3135303639202d3230303735203137353530203135313632202d32383037202d31383134312034333739202d3233333437202d3330373938202d31313235352037353238202d32323432312037313734202d31373737322037343833202d37323635203238333939203235373636203131363336202d33323034202d383939322037323336202d34303330203235373530203132363438202d3235363437202d32383134362033303036372031303637332039383030203130393230202d3231303632202d3138353336202d39303739202d3233373439203136303433202d31313831332036393031202d38373233202d3131313937, 0x323937312e3530, 20971520, 200),
(136, 1013, 0x3130302031300d0a33313234203539343220313337373220323230333320363537362032323930382032383732203232323234202d3438383720373930382039333337202d37343030202d33393935202d3132393538203235303733202d3238333731203239363734202d3134353530202d37343630202d313433302031383637302031393937382031383439202d313238322034333534202d36383632203237323338203231353039202d3237343534202d3130343037202d32363432342039343833202d3330373037202d38343333203231323837203239323537203137383032202d3233303138203233363830203233363835203330363331202d31363930203139313436203139323538202d323436362031333130203137393533203131343438202d323434333120313431323020383935342035323439202d323238323620323339312032383435382031363535312031333938202d3235323232202d35343632202d31363930202d3135303639202d3230303735203137353530203135313632202d32383037202d31383134312034333739202d3233333437202d3330373938202d31313235352037353238202d32323432312037313734202d31373737322037343833202d37323635203238333939203235373636203131363336202d33323034202d383939322037323336202d34303330203235373530203132363438202d3235363437202d32383134362033303036372031303637332039383030203130393230202d3231303632202d3138353336202d39303739202d3233373439203136303433202d31313831332036393031202d38373233202d3131313937, 0x31303234372e3230, 20971520, 200);

-- --------------------------------------------------------

--
-- Структура таблицы `spm_submissions`
--

DROP TABLE IF EXISTS `spm_submissions`;
CREATE TABLE IF NOT EXISTS `spm_submissions` (
  `submissionId` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `classworkId` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `olympId` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `seen` tinyint(1) NOT NULL DEFAULT '0',
  `codeLang` tinytext NOT NULL,
  `userId` bigint(20) NOT NULL,
  `problemId` bigint(20) UNSIGNED NOT NULL,
  `testType` enum('unset','syntax','debug','release') NOT NULL DEFAULT 'unset',
  `problemCode` mediumblob NOT NULL,
  `customTest` blob,
  `status` enum('waiting','processing','ready') NOT NULL DEFAULT 'waiting',
  `hasError` tinyint(1) NOT NULL DEFAULT '0',
  `errorOutput` mediumtext,
  `output` blob,
  `exitcodes` mediumtext,
  `usedProcTime` text,
  `usedMemory` text,
  `compiler_text` blob,
  `tests_result` text,
  `b` double UNSIGNED NOT NULL DEFAULT '0',
  PRIMARY KEY (`submissionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Problem submissions';

-- --------------------------------------------------------

--
-- Структура таблицы `spm_teacherid`
--

DROP TABLE IF EXISTS `spm_teacherid`;
CREATE TABLE IF NOT EXISTS `spm_teacherid` (
  `userId` bigint(20) UNSIGNED NOT NULL,
  `teacherId` tinytext NOT NULL,
  `enabled` tinyint(1) NOT NULL DEFAULT '1',
  `newUserPermission` int(11) NOT NULL DEFAULT '2',
  PRIMARY KEY (`userId`),
  UNIQUE KEY `teacherId` (`teacherId`(15))
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `spm_users`
--

DROP TABLE IF EXISTS `spm_users`;
CREATE TABLE IF NOT EXISTS `spm_users` (
  `id` bigint(8) UNSIGNED NOT NULL AUTO_INCREMENT,
  `sessionId` text CHARACTER SET utf8 COLLATE utf8_bin,
  `last_online` datetime NOT NULL DEFAULT '2001-07-27 10:30:00',
  `avatar` mediumblob,
  `password` tinytext NOT NULL,
  `firstname` tinytext NOT NULL,
  `secondname` tinytext NOT NULL,
  `thirdname` tinytext NOT NULL,
  `birthday_date` date NOT NULL DEFAULT '2000-01-01',
  `email` tinytext CHARACTER SET ascii NOT NULL,
  `teacherId` bigint(20) UNSIGNED NOT NULL,
  `permissions` smallint(5) UNSIGNED NOT NULL,
  `country` tinytext,
  `city` tinytext,
  `school` tinytext,
  `groupid` int(10) UNSIGNED NOT NULL,
  `associated_olymp` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`(255))
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `spm_users_groups`
--

DROP TABLE IF EXISTS `spm_users_groups`;
CREATE TABLE IF NOT EXISTS `spm_users_groups` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` tinytext NOT NULL,
  `teacherId` bigint(20) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='User groups';
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
