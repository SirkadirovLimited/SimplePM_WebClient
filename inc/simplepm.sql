-- phpMyAdmin SQL Dump
-- version 4.7.0
-- https://www.phpmyadmin.net/
--
-- Хост: localhost
-- Время создания: Мар 01 2018 г., 22:10
-- Версия сервера: 5.7.21-log
-- Версия PHP: 7.1.1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `simplepm`
--

DELIMITER $$
--
-- Процедуры
--
DROP PROCEDURE IF EXISTS `updateBCount`$$
CREATE DEFINER=`*`@`localhost` PROCEDURE `updateBCount` (IN `uId` BIGINT UNSIGNED)  SQL SECURITY INVOKER
begin
DECLARE sumVal FLOAT DEFAULT 0;
SELECT SUM(`b`) INTO sumVal FROM `spm_submissions` WHERE (`userId` = uId AND `b` > 0 AND `classworkId` = 0 AND `olympId` = 0);
UPDATE `spm_users` SET `bcount` = sumVal WHERE `id` = uId LIMIT 1;
end$$

DROP PROCEDURE IF EXISTS `updateRating`$$
CREATE DEFINER=`*`@`localhost` PROCEDURE `updateRating` (IN `urId` BIGINT UNSIGNED)  SQL SECURITY INVOKER
begin

DECLARE sumVal FLOAT DEFAULT 0;
DECLARE rProblemsCount TINYINT DEFAULT 0;

SELECT SUM(`b`) INTO `sumVal` FROM `spm_submissions` WHERE (`userId` = urId AND `b` >= 0 AND `classworkId` = 0 AND `olympId` = 0) ORDER BY `b` DESC LIMIT 30;

SELECT COUNT(`submissionId`) INTO `rProblemsCount` FROM `spm_submissions` WHERE (`userId` = urId AND `b` >= 0 AND `classworkId` = 0 AND `olympId` = 0) ORDER BY `b` DESC LIMIT 30;

UPDATE `spm_users` SET `rating` = (sumVal / rProblemsCount) WHERE `id` = urId LIMIT 1;
end$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `spm_classworks`
--

DROP TABLE IF EXISTS `spm_classworks`;
CREATE TABLE IF NOT EXISTS `spm_classworks` (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` tinytext NOT NULL,
  `description` text NOT NULL,
  `startTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `endTime` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `teacherId` bigint(20) UNSIGNED NOT NULL,
  `studentsGroup` bigint(20) UNSIGNED NOT NULL,
  `ratingSystem` tinyint(3) UNSIGNED NOT NULL,
  `problemslist` mediumtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Classworks';

-- --------------------------------------------------------

--
-- Структура таблицы `spm_homeworks`
--

DROP TABLE IF EXISTS `spm_homeworks`;
CREATE TABLE IF NOT EXISTS `spm_homeworks` (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` tinytext NOT NULL,
  `subject` tinytext,
  `description` text,
  `addition` text NOT NULL,
  `creationDate` date NOT NULL,
  `endingDate` date NOT NULL,
  `type` enum('primary','secondary') NOT NULL,
  `teacherId` bigint(20) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `spm_messages`
--

DROP TABLE IF EXISTS `spm_messages`;
CREATE TABLE IF NOT EXISTS `spm_messages` (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `date` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `unread` tinyint(1) NOT NULL DEFAULT '1',
  `from` int(10) UNSIGNED NOT NULL,
  `to` int(10) UNSIGNED NOT NULL,
  `message` blob NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Messages table';

-- --------------------------------------------------------

--
-- Структура таблицы `spm_olympiads`
--

DROP TABLE IF EXISTS `spm_olympiads`;
CREATE TABLE IF NOT EXISTS `spm_olympiads` (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` tinytext NOT NULL,
  `description` text,
  `startTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `endTime` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `teacherId` bigint(20) UNSIGNED NOT NULL,
  `type` enum('Private','Public') NOT NULL,
  `testingType` enum('Full','ByTestsCount') NOT NULL DEFAULT 'Full',
  `problemslist` mediumtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `spm_problems`
--

DROP TABLE IF EXISTS `spm_problems`;
CREATE TABLE IF NOT EXISTS `spm_problems` (
  `id` mediumint(8) UNSIGNED NOT NULL AUTO_INCREMENT,
  `enabled` tinyint(1) NOT NULL DEFAULT '1',
  `difficulty` tinyint(3) UNSIGNED NOT NULL,
  `catId` smallint(5) UNSIGNED NOT NULL,
  `name` tinytext NOT NULL,
  `description` mediumtext NOT NULL,
  `input` text,
  `output` text,
  `authorSolution` mediumblob,
  `authorSolutionLanguage` tinytext,
  `testsInformation` longblob,
  `adaptProgramOutput` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `spm_problems`
--

INSERT INTO `spm_problems` (`id`, `enabled`, `difficulty`, `catId`, `name`, `description`, `input`, `output`, `authorSolution`, `authorSolutionLanguage`, `testsInformation`, `adaptProgramOutput`) VALUES
(1001, 1, 1, 1, 'Hello, world!', 'Напишіть програму, що виведе у вихідний потік рядок &quot;Hello, world!&quot; і одразу ж завершить свою роботу.', '', 'В вихідний потік вивести фразу \"Hello, world!\".', 0x7573696e672053797374656d3b0d0a0d0a6e616d6573706163652070726f626c656d0d0a7b0d0a202020200d0a20202020636c617373204d61696e436c6173730d0a202020207b0d0a20202020202020200d0a20202020202020207075626c69632073746174696320766f6964204d61696e28290d0a20202020202020207b0d0a202020202020202020202020436f6e736f6c652e57726974654c696e65282248656c6c6f2c20776f726c642122293b0d0a20202020202020207d0d0a20202020202020200d0a202020207d0d0a202020200d0a7d, NULL, NULL, 1),
(1002, 1, 1, 1, 'A+B', 'Вивести у стандартний вихідний потік суму A і B.', 'У вхідному потоці надаються 2 цілих числа через пробіл, що знаходяться у проміжку від -32000 до 32000.', 'В вихідний потік вивести суму чисел, що надані у вхідному потоці.', 0x76617220612c623a696e74656765723b0d0a626567696e0d0a20202020726561646c6e28612c62293b0d0a20202020777269746528612b62293b0d0a656e642e, NULL, NULL, 1),
(1003, 1, 1, 1, 'C+D', 'Вивести на екран суму речових&amp;nbsp;чисел C и D.', 'У вхідному потоці надано 2 речових числа, що знаходяться у діапазоні від -32000 до 32000.', 'Вивести на екран суму наданих чисел із точністю 3 знаки після точки.', 0x76617220632c643a7265616c3b0d0a626567696e0d0a20202020726561646c6e28632c64293b0d0a2020202077726974652828632b64293a303a33293b0d0a656e642e, NULL, NULL, 1),
(1004, 1, 2, 6, 'Надтяжка задача', '&lt;p&gt;Вивести даний у вхідному потоці масив у вихідний потік.&lt;/p&gt;', 'У першому рядку вхідного потоку задано натуральне число N - кількість елементів цілочисельного масиву (N <1000).\r\nУ другому рядку перераховані через пробіл значення елементів масиву Ai (-32000 <Ai <32000)', 'Вивести в стовпчик значення всіх елементів заданого масиву в прямому порядку.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a20202020692c6e3a696e74656765723b0d0a626567696e0d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a20202020202020207265616428615b695d293b0d0a202020202020202077726974656c6e28615b695d293b0d0a20202020656e643b0d0a656e642e, NULL, NULL, 1),
(1005, 1, 2, 6, 'Пошук найменшого', '&lt;p&gt;У вхідному потоці надана послідовність чисел. Знайти в ній найменше число.&lt;/p&gt;', 'Задано спочатку число N (кількість чисел в послідовності), а потім на новому рядку N чисел. Всі числа - з діапазону Integer (|a[i]| <= 32000). N <= 100.', 'Виведіть на екран найменше число.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a20202020692c6e3a696e74656765723b0d0a202020206d696e3a696e74656765723b0d0a626567696e0d0a20202020726561646c6e286e293b0d0a202020206d696e3a3d33323030303b0d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a20202020202020207265616428615b695d293b0d0a2020202020202020696620615b695d3c6d696e207468656e206d696e3a3d615b695d3b0d0a20202020656e643b0d0a202020207772697465286d696e293b0d0a656e642e, NULL, NULL, 1),
(1006, 1, 4, 6, 'Вивести одиноких', '&lt;p&gt;Дано два масиви чисел. Потрібно вивести у вихідний файл ті елементи першого масиву (в тому порядку, в якому вони йдуть в першому масиві), яких немає в другому масиві.&lt;/p&gt;', 'У вхідному потоці записано спочатку число N - кількість елементів в першому\r\nмасиві, потім N чисел - елементи масиву. Потім записано число M - кількість\r\nелементів в другому масиві. Потім записані елементи другого масиву.\r\nКількість елементів кожного масиву не перевищує 100. Самі елементи -\r\nчисла з діапазону Longint (|a[i]| <= 2 147 483 647).', 'У вихідний потік виведіть ті елементи першого масиву, яких немає в другому в\r\nтому порядку, в якому вони йдуть в першому масиві.', 0x766172206e2c6d3a696e74656765723b0d0a20202020612c623a61727261795b312e2e3130305d206f66206c6f6e67696e743b0d0a20202020692c6a3a696e74656765723b0d0a20202020663a626f6f6c65616e3b0d0a626567696e0d0a2020202072656164286e293b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a2020202072656164286d293b0d0a20202020666f72206a3a3d3120746f206e20646f207265616428625b6a5d293b0d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a2020202020202020663a3d747275653b0d0a2020202020202020666f72206a3a3d3120746f206d20646f0d0a202020202020202020696620615b695d3d625b6a5d207468656e0d0a202020202020202020202020663a3d66616c73653b0d0a202020202020202069662066207468656e20777269746528615b695d2c272027293b0d0a20202020656e643b0d0a656e642e, NULL, NULL, 1),
(1007, 1, 6, 6, 'День народження Sirkadirov-а', '&lt;p&gt;Головний кухар вирішив влаштувати в Гімназії 28 День народження Sirkadirov-а. Для цього він приготував гімназистам N надзвичайно смачних піц і потай ухвалив, що перший, який завітав покуштувати поварську страву школяр повинен отримати найбільшу кількість смачних піц, а кожний наступний - строго менше, ніж попередній (кухареві дуже не подобалося, коли до приготовленого їм обіду спізнювалися і той змушений був остигати).&lt;/p&gt;\r\n&lt;p&gt;Звичайно, введене правило залишає істотне свавілля в числі піц, одержуваних черговим з\'явився гімназистом, і це число не в останню чергу залежатиме від ставлення Sirkadirov-а до гімназиста, а також від чарівних слів, вимовлених ним на честь Sirkadirov-а. Наприклад, 6 піц можуть бути в результаті розподілені по одній з наступних чотирьох схем: 3 + 2 + 1 (три піци першому з тих, хто прийшов школярів, дві - другого і одну - третього), 4 + 2, 5 + 1 та 6 (всі піци з\'їдає щасливчик, який прийшов першим).&lt;/p&gt;\r\n&lt;p&gt;Кухар просить вас написати програму, яка визначить, якою кількістю різних способів він може розподілити приготоване ласощі серед школярів.&lt;/p&gt;', 'Вхідний потік містить одне ціле число N - кількість приготованих\r\nкухарем піц (0 <= N <= 200).', 'Вихідний потік повинен містити одне ціле число типу longint (0 <= a <= 2 147 483 647), що дорівнює кількості можливих розподілів піц.', 0x76617220613a61727261795b302e2e3230305d206f6620636f6d703b0d0a20202020692c6a2c6e3a696e74656765723b0d0a626567696e0d0a2020202072656164286e293b0d0a2020202066696c6c6368617228612c73697a656f662861292c30293b0d0a20202020615b305d3a3d313b0d0a20202020666f72206a3a3d3120746f206e20646f20626567696e0d0a2020202020202020666f7220693a3d6e20646f776e746f206a20646f200d0a202020202020202020202020615b695d3a3d615b695d2b615b692d6a5d3b0d0a20202020656e643b0d0a20202020777269746528615b6e5d293b0d0a656e642e, NULL, NULL, 1),
(1008, 1, 50, 19, 'Регулярні вирази', '&lt;p&gt;Потрібно визначити чи підходить задане слово під заданий шаблон. Шаблон задається великими латинськими буквами, знаками &quot;?&quot; - будь-який символ, &quot;*&quot; - будь-яка послідовність символів (навіть порожня).&lt;/p&gt;', 'У перших двох рядках записані шаблон і слово: в одному рядку записаний шаблон - послідовність великих\r\nлатинських букв, \"?\" і \"*\", в інший - слово, що складається тільки\r\nз великих латинських букв (рядки коротше 100 символів).', 'Вивести YES, якщо слово підходить або NO, якщо немає.', 0x636f6e7374206d61786c203d203236303b0d0a76617220692c6a2c6c312c6c323a696e74656765723b0d0a2020202073312c73322c73333a737472696e673b0d0a202020206d6179312c6d6179323a61727261795b302e2e6d61786c5d6f6620626f6f6c65616e3b0d0a0d0a66756e6374696f6e20776f726428733a737472696e67293a626f6f6c65616e3b0d0a76617220693a696e74656765723b0d0a626567696e0d0a20202020776f7264203a3d2066616c73653b0d0a20202020666f7220693a3d3120746f206c656e67746828732920646f0d0a20202020202020206966206e6f742028735b695d20696e205b2741272e2e275a275d29207468656e20657869743b0d0a20202020776f7264203a3d20747275653b0d0a656e643b0d0a0d0a626567696e0d0a20202020726561646c6e287331293b0d0a20202020726561646c6e287332293b0d0a20202020696620776f726428733229207468656e20626567696e0d0a20202020202020207333203a3d2073313b0d0a20202020202020207331203a3d2073323b0d0a20202020202020207332203a3d2073333b0d0a20202020656e643b0d0a202020206c313a3d206c656e677468287331293b207b20776f7264207d0d0a202020206c323a3d206c656e677468287332293b0d0a20202020666f72206a3a3d3020746f206c3120646f0d0a20202020202020206d6179315b6a5d203a3d206a3d303b0d0a20202020666f7220693a3d3120746f206c3220646f20626567696e0d0a20202020202020206d6179325b305d203a3d206d6179315b305d20616e6420282073325b695d203d20272a2720293b0d0a2020202020202020666f72206a3a3d3120746f206c3120646f20626567696e0d0a20202020202020202020202069662073325b695d203d20273f270d0a202020202020202020202020202020207468656e206d6179325b6a5d203a3d206d6179315b6a2d315d0d0a20202020202020202020202020202020656c73650d0a202020202020202020202020202020202020202069662073325b695d203d20272a270d0a2020202020202020202020202020202020202020202020207468656e206d6179325b6a5d3a3d6d6179315b6a5d206f72206d6179315b6a2d315d206f72206d6179325b6a2d315d0d0a202020202020202020202020202020202020202020202020656c7365206d6179325b6a5d3a3d6d6179315b6a2d315d20616e64202873315b6a5d203d2073325b695d293b0d0a2020202020202020656e643b0d0a20202020202020206d617931203a3d206d6179323b0d0a20202020656e643b0d0a202020206966206d6179315b6c315d0d0a20202020202020207468656e207772697465282759455327290d0a2020202020202020656c736520777269746528274e4f27293b0d0a656e642e, NULL, NULL, 1),
(1009, 1, 2, 3, 'Шахова туга', '&lt;p&gt;Дано координати двох полів шахової дошки (координати клітини - це 2 числа від 1 до 8: номер стовпця і номер рядка) Одного кольору ці клітини на шахівниці чи ні? Вивести у вихідний потік ЄДИНИЙ РЯДОК, що містить YES, якщо вони одного кольору, і NO у протилежному випадку.&lt;/p&gt;', 'У вхідному потоці дано 4 числа типу byte (від 0 до 255).', 'Вивести у вихідний потік\r\nЄДИНИЙ РЯДОК, що містить YES, якщо вони одного кольору, і NO у протилежному випадку.', 0x7661722078312c78323a627974653b0d0a2020202079312c79323a627974653b0d0a626567696e0d0a20202020726561642878312c79312c78322c7932293b0d0a202020206966202878312b79312b78322b793229206d6f642032203c3e20300d0a20202020202020207468656e20777269746528274e4f27290d0a2020202020202020656c7365207772697465282759455327293b0d0a656e642e, NULL, NULL, 1),
(1010, 1, 10, 8, 'Розпакування рядків', '&lt;p&gt;Будемо розглядати тільки рядки, що складаються з великих латинських букв. Наприклад, розглянемо рядок AAAABCCCCCDDDD. Довжина цього рядка дорівнює 14. Оскільки рядок складається тільки з латинських букв, що повторюються, символи можуть бути видалені і замінені числами, що визначають кількість повторень. Таким чином, даний рядок може бути представлена як 4AB5C4D. Довжина такого рядка 7. Описаний метод ми назвемо упаковкою рядки. Напишіть програму, яка бере упакований рядок і відновлює по ньому початковий рядок.&lt;/p&gt;', 'Вхідний потік містить один упакований рядок. У рядку можуть зустрічатися тільки конструкції виду nA, де n - кількість повторень символу (ціле число від 2 до 99), а A - заголовна латинська буква, або конструкції виду A, тобто символ без числа, що визначає кількість повторень. Максимальна довжина рядка не перевищує 80 символів.', 'У вихідний потік виведіть відновлений рядок. При цьому рядок повинен бути розбитий на рядки довжиною рівно по 40 символів (за винятком останнього, який може містити менше 40 символів).', 0x76617220733a737472696e673b0d0a20202020692c6b3a696e74656765723b0d0a626567696e0d0a20202020726561646c6e2873293b0d0a20202020693a3d313b0d0a202020207768696c6520693c3d6c656e67746828732920646f20626567696e0d0a20202020202020206b3a3d303b0d0a2020202020202020207768696c652028735b695d203e3d2027302729616e6428735b695d203c3d2739272920646f20626567696e0d0a2020202020202020202020206b3a3d6b2a31303b0d0a2020202020202020202020206b3a3d6b2b6f726428735b695d29202d206f726428273027293b200d0a202020202020202020202020696e632869293b0d0a2020202020202020656e643b0d0a20202020202020206966206b3d30207468656e20777269746528735b695d290d0a2020202020202020656c736520626567696e0d0a2020202020202020202020207768696c65206b3e3020646f20626567696e0d0a20202020202020202020202020202020646563286b293b0d0a20202020202020202020202020202020777269746528735b695d293b20202020200d0a202020202020202020202020656e643b0d0a2020202020202020656e643b0d0a2020202020202020696e632869293b0d0a20202020656e643b0d0a20656e642e, NULL, NULL, 1),
(1011, 1, 3, 6, 'Кількість перед парними', '&lt;p&gt;&lt;span lang=&quot;uk&quot;&gt;Знайдіть кількість елементів масиву, після яких знаходиться парне число.&lt;/span&gt;&lt;/p&gt;\r\n&lt;p&gt;&lt;span lang=&quot;uk&quot;&gt;============&lt;/span&gt;&lt;/p&gt;\r\n&lt;p&gt;&lt;span lang=&quot;uk&quot;&gt;Найдите количество элементов массива, после которых находится четное число.&lt;/span&gt;&lt;/p&gt;', 'У першому рядку дано натуральне число N (1 ≤ N ≤100) - кількість елементів масиву.\r\nУ другому рядку через пропуск перераховані всі елементи масиву (-32000 ≤ a [i] ≤ 32000).\r\n============\r\nВ первой строке дано натуральное число N (1 ≤ N ≤100) - количество элементов массива.\r\nВо второй строке через пробел перечислены все элементы массива (-32000 ≤ a [i] ≤ 32000).', 'Єдине натуральне число.\r\n============\r\nЕдинственное натуральное число', 0x76617220613a6172726179205b312e2e3130305d206f6620696e74656765723b0d0a202020206e2c692c733a696e74656765723b0d0a0d0a626567696e0d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a20202020733a3d303b0d0a20202020666f7220693a3d3220746f206e20646f200d0a202020202020202069662028615b695d206d6f6420323d3029207468656e20733a3d732b313b0d0a2020202077726974652873293b0d0a656e642e, NULL, NULL, 1),
(1012, 1, 3, 6, 'Не додатні сусіди', '&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;Знайдіть суму елементів масиву, у яких є не додатній сусід.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;================&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;\r\n&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;Найдите сумму элементов массива,&amp;nbsp;у которых&amp;nbsp;есть не положительный сосед.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;', 'У першому рядку дано натуральне число N (1 ≤ N ≤100) - кількість елементів масиву. У другому рядку через пропуск перераховані всі елементи масиву (-32000 ≤ a [i] ≤ 32000).\r\n================\r\nВ первой строке дано натуральное число N (1 ≤ N ≤100) - количество элементов массива. Во второй строке через пробел перечислены все элементы массива (-32000 ≤ a [i] ≤ 32000).', 'Єдине ціле число.\r\n================\r\nЕдинственное целое число.', 0x76617220613a6172726179205b302e2e3130315d206f6620696e74656765723b0d0a202020206e2c693a696e74656765723b0d0a20202020733a6c6f6e67696e743b0d0a0d0a626567696e0d0a20202020726561646c6e286e293b0d0a20202020615b305d3a3d313b0d0a20202020615b6e2b315d3a3d313b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a20202020733a3d303b0d0a20202020666f7220693a3d3120746f206e20646f200d0a202020202020202069662028615b692d315d3c3d3029206f722028615b692b315d3c3d3029207468656e20733a3d732b615b695d3b0d0a2020202077726974652873293b0d0a656e642e0d0a, NULL, NULL, 1),
(1013, 1, 5, 6, 'Среднее арифметическое непростых', '&lt;p&gt;Найти среднее арифметическое первых k не простых чисел в заданном одномерном массиве. Гарантируется, что в массиве не меньше k простых чисел.&lt;/p&gt;', 'В первой строке дано число N - количество элементов массива (0 < N < 101) и целое число k (0 < k <101).\r\nВо второй строке перечислены элементы массива через пробел (-32000 < а[i] < 32000)', 'Единственное вещественное число с точностью до двух знаков после запятой.', 0x66756e6374696f6e20636865636b2028613a696e743634293a626f6f6c65616e3b0d0a0976617220663a626f6f6c65616e3b0d0a2020202009643a696e7436343b0d0a09626567696e0d0a2020202009663a3d613e313b0d0a2020202020202020643a3d323b0d0a20202020202020207768696c652028662920616e642028642a643c3d612920646f20626567696e0d0a202020202020202009663a3d61206d6f6420643c3e303b0d0a202020202020202020202020643a3d642b313b0d0a202020202020202009656e643b0d0a2020202020202020636865636b3a3d663b0d0a20202020656e643b0d0a0d0a76617220613a6172726179205b312e2e313030303030305d206f6620696e7436343b0d0a09692c6e2c732c6b2c633a696e7436343b0d0a0d0a626567696e0d0a09726561646c6e286e2c6b293b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a20202020733a3d303b0d0a20202020633a3d303b0d0a20202020666f7220693a3d3120746f206e20646f200d0a202020200969662028633c6b2920616e6420286e6f7428636865636b28615b695d292929207468656e20626567696e0d0a202020202020202009733a3d732b615b695d3b0d0a202020202020202020202020633a3d632b313b0d0a202020202020202020202020656e643b0d0a2020202077726974652028732f6b3a303a32293b0d0a656e642e0d0a, NULL, NULL, 1),
(1014, 1, 3, 6, 'Среднее арифметическое минимумов', '&lt;p style=&quot;text-align: left;&quot;&gt;Найти среднее арифметическое минимумов данного массива.&lt;/p&gt;', 'В первой строке дано число N - количество элементов массива (0 < N < 101) и целое число k (0 < k <101). Во второй строке перечислены элементы массива через пробел (-32000 < а[i] < 32000).', 'Единственное вещественное число с точностью до двух знаков после запятой.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a20202020692c6e3a696e74656765723b0d0a202020206d696e3a7265616c3b0d0a626567696e0d0a202020200d0a20202020726561646c6e286e293b0d0a202020200d0a202020206d696e3a3d33323030303b0d0a202020200d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a20202020202020200d0a20202020202020207265616428615b695d293b0d0a2020202020202020696620615b695d203c206d696e207468656e206d696e3a3d615b695d3b0d0a20202020202020200d0a20202020656e643b0d0a202020200d0a202020207772697465286d696e3a303a32293b0d0a202020200d0a656e642e, NULL, NULL, 1),
(1015, 1, 1, 6, 'Разница мин и макс', '&lt;p&gt;Найти абсолютную величину разницы между наибольшим четным и наименьшим отрицательным элементом массива.&lt;/p&gt;', 'В первой строке дано число N - количество элементов массива (0 < N < 101) и целое число k (0 < k <101). Во второй строке перечислены элементы массива через пробел (-32000 < а[i] < 32000).', 'Единственное целое положительное число.', NULL, NULL, NULL, 1),
(1016, 1, 3, 6, 'Наибольший элемент', '&lt;p&gt;Найти наибольший элемент числовой последовательности.&lt;/p&gt;', 'Во входном потоке в первой строке задано целое число N - количество элементов целочисленной числовой последовательности (0 < N < 100). Во второй строке через пробел перечислены значения элементов числовой последовательности. Значения элементов по модулю не превышают 30000.', 'В выходной поток вывести единственное целое число.', 0x696d706f7274206a6176612e7574696c2e2a3b0d0a0d0a636c617373204d61696e436c617373207b0d0a20200d0a202020207075626c69632073746174696320766f6964206d61696e28537472696e675b5d206172677329207b0d0a2020090d0a20202020202020205363616e6e6572207363203d206e6577205363616e6e65722853797374656d2e696e293b0d0a20202020202020200d0a2020202020202020696e74206e203d2073632e6e657874496e7428293b0d0a20202020202020200d0a2020202020202020696e74206d6178203d202d33303030303b0d0a20202020202020200d0a2020202020202020666f722028696e742069203d20313b2069203c3d206e3b20692b2b29207b0d0a2020202020202020202020200d0a202020202020202020202020696e742074203d2073632e6e657874496e7428293b0d0a2020202020202020202020200d0a202020202020202020202020696620286d6178203c2074290d0a202020202020202020202020202020206d6178203d20743b0d0a2020202020200d0a20202020202020207d0d0a20202020202020200d0a202020202020202053797374656d2e6f75742e7072696e746c6e286d6178293b0d0a20202020202020200d0a202020207d0d0a202020200d0a7d, NULL, NULL, 1),
(1017, 1, 3, 6, 'Индекс наибольшего', '&lt;p&gt;Найти индекс последнего наибольшего элемента числовой последовательности.&lt;/p&gt;', 'Во входном потоке в первой строке задано целое число N - количество элементов целочисленной числовой последовательности (0 < N < 100). Во второй строке через пробел перечислены значения элементов числовой последовательности. Значения элементов по модулю не превышают 30000.', 'В выходной поток вывести единственное целое число.', NULL, NULL, NULL, 1),
(1018, 1, 3, 6, 'Индекс наименьшего', '&lt;p&gt;Найти индекс последнего наименьшего элемента числовой последовательности. Нумерация элементов массива с единицы.&lt;/p&gt;', 'Во входном потоке в первой строке задано целое число N - количество элементов целочисленной числовой последовательности (0 < N < 100). Во второй строке через пробел перечислены значения элементов числовой последовательности. Значения элементов по модулю не превышают 30000.', 'В выходной поток вывести единственное целое число.', NULL, NULL, NULL, 1),
(1019, 1, 3, 6, 'Индекс первого наибольшего', '&lt;p&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 16px; text-align: justify;&quot;&gt;Найти индекс первого наибольшего элемента числовой последовательности.&lt;/span&gt;&lt;/p&gt;', 'Во входном потоке в первой строке задано целое число N - количество элементов целочисленной числовой последовательности (0 < N < 100). Во второй строке через пробел перечислены значения элементов числовой последовательности. Значения элементов по модулю не превышают 30000.', 'В выходной поток вывести единственное целое число.', 0x76617220613a6172726179205b312e2e3130305d206f6620696e74656765723b0d0a202020206e2c692c6d696e3a696e74656765723b0d0a0d0a626567696e0d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a202020206d696e3a3d313b0d0a20202020666f7220693a3d3220746f206e20646f200d0a202020202020202069662028615b695d203e20615b6d696e5d29207468656e206d696e3a3d693b0d0a202020207772697465286d696e293b0d0a656e642e0d0a, NULL, NULL, 1),
(1020, 1, 3, 6, 'Индекс первого наименьшего', '&lt;p&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 16px; text-align: justify;&quot;&gt;Найти индекс первого наименьшего элемента числовой последовательности.&lt;/span&gt;&lt;/p&gt;', 'Во входном потоке в первой строке задано целое число N - количество элементов целочисленной числовой последовательности (0 < N < 100). Во второй строке через пробел перечислены значения элементов числовой последовательности. Значения элементов по модулю не превышают 30000.', 'В выходной поток вывести единственное целое число.', 0x76617220613a6172726179205b312e2e3130305d206f6620696e74656765723b0d0a202020206e2c692c6d696e3a696e74656765723b0d0a0d0a626567696e0d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a202020206d696e3a3d313b0d0a20202020666f7220693a3d3220746f206e20646f200d0a202020202020202069662028615b695d203c20615b6d696e5d29207468656e206d696e3a3d693b0d0a202020207772697465286d696e293b0d0a656e642e0d0a, NULL, NULL, 1),
(1021, 1, 4, 6, 'Удаление нулевого элемента', '&lt;p&gt;В заданном линейном массиве есть только один элемент, значение которого равно нулю. Удалить этот элемент из массива.&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов целочисленного массива (N < 100) \r\nВо второй строке перечислены через пробел элементы массива, значения которых по модулю не превосходит 30000.', 'В выходной поток вывести в строку через пробел целые числа.', NULL, NULL, NULL, 1),
(1022, 1, 4, 6, 'Удаление нулей', '&lt;p&gt;В заданном линейном массиве удалить все нулевые элементы. Если будут удалены все элементы, то вывести NO.&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов целочисленного массива (N < 100) \r\nВо второй строке перечислены через пробел значения элементов массива, по модулю не превышающие 30000.', 'В выходной поток вывести в строку через пробел целые числа или NO.', 0x7479706520746172723d6172726179205b312e2e313030305d206f6620696e74656765723b0d0a0d0a70726f636564757265207265616431202876617220613a746172723b20766172206e3a696e7465676572293b0d0a0976617220693a696e74656765723b0d0a09626567696e0d0a2020202009726561646c6e20286e293b0d0a2020202020202020666f7220693a3d3120746f206e20646f20726561642028615b695d293b0d0a20202020656e643b0d0a0d0a70726f6365647572652064656c202876617220613a746172723b766172206e3a696e74656765723b20693a696e7465676572293b0d0a09766172206a3a696e74656765723b0d0a09626567696e0d0a20202020096e3a3d6e2d313b0d0a2020202020202020666f72206a3a3d6920746f206e20646f0d0a202020202020202009615b6a5d3a3d615b6a2b315d3b0d0a2020202020202020656e643b0d0a20202020202020200d0a70726f63656475726520726573202876617220613a746172723b20766172206e3a696e7465676572293b0d0a0976617220692c6a3a696e74656765723b0d0a20202020626567696e0d0a2020202009693a3d313b0d0a20202020202020207768696c6520693c3d6e20646f0d0a202020202020202009696620615b695d3d30207468656e2064656c2028612c6e2c69290d0a2020202020202020202020202020656c736520693a3d692b313b0d0a2020202020202020656e643b0d0a0d0a70726f63656475726520777269746531202876617220613a746172723b20766172206e3a696e7465676572293b0d0a0976617220693a696e74656765723b0d0a09626567696e0d0a20202020202020206966206e3d30207468656e2077726974652028274e4f27290d0a202020202020202009656c736520666f7220693a3d3120746f206e20646f2077726974652028615b695d2c272027293b0d0a20202020656e643b0d0a0d0a76617220613a746172723b0d0a096e3a696e74656765723b0d0a626567696e0d0a0972656164312028612c6e293b0d0a202020207265732028612c6e293b0d0a202020207772697465312028612c6e293b0d0a656e642e0d0a, NULL, NULL, 1),
(1023, 1, 4, 6, 'Удаление положительных', '&lt;p&gt;В заданном линейном массиве удалить все положительные элементы.&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов целочисленного массива (N < 100) \r\nВо второй строке - перечислены через пробел значения элементов массива, не превышающие по модулю 30000.', 'Вывести в строку, через пробел элементы преобразованного массива.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a20202020692c6e3a696e74656765723b0d0a20202020636f756e743a696e74656765723b0d0a626567696e0d0a202020200d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f0d0a20202020202020207265616428615b695d293b0d0a202020200d0a20202020636f756e743a3d303b0d0a202020200d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a20202020202020200d0a2020202020202020696620615b695d203e20300d0a2020202020202020202020207468656e20636f756e743a3d636f756e742b310d0a202020202020202020202020656c736520777269746528615b695d2c20272027293b0d0a20202020202020200d0a20202020656e643b0d0a202020200d0a20202020696620636f756e74203d206e0d0a20202020202020207468656e2077726974656c6e28274e4f27293b0d0a202020200d0a656e642e, NULL, NULL, 1),
(1024, 1, 4, 6, 'Удаление отрицательных', '&lt;p&gt;&lt;span style=&quot;color: #333333; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 16px; text-align: justify;&quot;&gt;В заданном линейном массиве удалить все&amp;nbsp;отрицательные элементы.&lt;/span&gt;&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов целочисленного массива (N < 100) \r\nВо второй строке - перечислены через пробел значения элементов массива, не превышающие по модулю 30000.', 'Вывести в строку, через пробел элементы преобразованного массива.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a20202020692c6e3a696e74656765723b0d0a20202020636f756e743a696e74656765723b0d0a626567696e0d0a202020200d0a20202020726561646c6e286e293b0d0a20202020666f7220693a3d3120746f206e20646f0d0a20202020202020207265616428615b695d293b0d0a202020200d0a20202020636f756e743a3d303b0d0a202020200d0a20202020666f7220693a3d3120746f206e20646f20626567696e0d0a20202020202020200d0a2020202020202020696620615b695d203c20300d0a2020202020202020202020207468656e20636f756e743a3d636f756e742b310d0a202020202020202020202020656c736520777269746528615b695d2c20272027293b0d0a20202020202020200d0a20202020656e643b0d0a202020200d0a20202020696620636f756e74203d206e0d0a20202020202020207468656e2077726974656c6e28274e4f27293b0d0a202020200d0a656e642e, NULL, NULL, 1),
(1025, 1, 4, 6, 'Вставить новый элемент - 1', '&lt;p&gt;В заданном линейном массиве вставить после первого нулевого элемента элемент, значение которого равно значению первого элемента массива. Нулевой элемент обязательно существует.&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов целочисленного массива (N < 100) \r\nВо второй строке перечислены через пробел значения элементов массива, по модулю не превышающие 30000.', 'В выходной поток вывести в строку через пробел целые числа.', NULL, NULL, NULL, 1),
(1026, 1, 4, 6, 'Вставить новый элемент - 2', '&lt;p&gt;В заданном линейном массиве вставить перед первым положительным элементом элемент, значение которого равно значению последнего элемента массива. Положительный элемент обязательно существует.&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов целочисленного массива (N < 100) \r\nВо второй строке перечислены через пробел значения элементов массива, по модулю не превышающие 30000.', 'В выходной поток вывести в строку через пробел целые числа.', NULL, NULL, NULL, 1),
(1027, 1, 4, 6, 'Вставить новый элемент - 3', '&lt;p&gt;В заданном линейном массиве вставить после последнего нулевого элемента элемент, значение которого равно значению первого элемента массива. Нулевой элемент обязательно существует.&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов целочисленного массива (N < 100) \r\nВо второй строке перечислены через пробел значения элементов массива, по модулю не превышающие 30000.', 'В выходной поток вывести в строку через пробел целые числа.', NULL, NULL, NULL, 1),
(1028, 1, 3, 6, 'Циклический сдвиг влево', '&lt;p&gt;Дан линейный массив на N элементов. Выполнить циклический сдвиг всех его элементов на один влево. (Первый элемент в таком случае перемещается в конец массива)&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов массива (N <= 100). \r\nВо второй строке через пробел перечислены целые значения элементов массива. Все значения не превышают по модулю 1000.', 'В выходной поток вывести в строку через пробел целые числа.', 0x76617220613a61727261795b312e2e3130305d206f6620696e74656765723b0d0a09692c6e3a696e74656765723b0d0a626567696e0d0a09726561646c6e286e293b0d0a202020200d0a20202020666f7220693a3d3120746f206e20646f207265616428615b695d293b0d0a202020200d0a20202020666f7220693a3d3220746f206e20646f20777269746528615b695d2c272027293b0d0a20202020777269746528615b315d2c272027293b0d0a656e642e, NULL, NULL, 1),
(1029, 1, 3, 6, 'Циклический сдвиг вправо', '&lt;p&gt;Дан линейный массив на N элементов. Выполнить циклический сдвиг всех его элементов на один вправо. (Последний элемент в таком случае перемещается на начало массива)&lt;/p&gt;', 'Во входном потоке в первой строке задано натуральное число N - количество элементов массива (N <= 100). \r\nВо второй строке через пробел перечислены целые значения элементов массива. Все значения не превышают по модулю 1000.', 'В выходной поток вывести в строку через пробел целые числа.', 0x696d706f7274206a6176612e7574696c2e2a3b0d0a0d0a636c617373204d61696e436c617373207b0d0a090d0a097075626c69632073746174696320766f6964206d61696e28537472696e675b5d206172677629207b0d0a09090d0a09096e6577204461726b5369646528292e6a6f696e28293b0d0a09090d0a097d0d0a090d0a7d0d0a0d0a636c617373204461726b53696465207b0d0a090d0a09696e745b5d206172723b0d0a090d0a097075626c696320766f6964206a6f696e2829207b0d0a09090d0a09097265616441727228293b0d0a0909777269746541727228293b0d0a09090d0a097d0d0a090d0a097072697661746520766f696420726561644172722829207b0d0a09090d0a09095363616e6e6572207363203d206e6577205363616e6e65722853797374656d2e696e293b0d0a09090d0a0909617272203d206e657720696e745b73632e6e657874496e7428295d3b0d0a09090d0a0909666f722028696e742069203d20303b2069203c206172722e6c656e6774683b20692b2b290d0a0909096172725b695d203d2073632e6e657874496e7428293b0d0a09090d0a097d0d0a090d0a097072697661746520766f69642077726974654172722829207b0d0a09090d0a090953797374656d2e6f75742e7072696e74286172725b6172722e6c656e677468202d20315d202b20222022293b0d0a09090d0a0909666f722028696e742069203d20303b2069203c206172722e6c656e677468202d20313b20692b2b290d0a09090953797374656d2e6f75742e7072696e74286172725b695d202b20222022293b0d0a09090d0a097d0d0a090d0a7d, NULL, NULL, 1),
(1030, 1, 5, 6, 'Отрезки и четверть', '&lt;p&gt;n отрезков на плоскости заданы своими координатами. Найдите количество отрезков, которые полностью лежат в первой четверти.&lt;/p&gt;', 'В первой строке дано число n (0<n<100).\r\nВо второй строке перечислены через пробел 2n целых чисел, где a[2*i-1] и а[2*I] - координаты i-ого отрезка.', 'Единственное целое число.', NULL, NULL, NULL, 1);

-- --------------------------------------------------------

--
-- Структура таблицы `spm_problems_categories`
--

DROP TABLE IF EXISTS `spm_problems_categories`;
CREATE TABLE IF NOT EXISTS `spm_problems_categories` (
  `id` smallint(5) UNSIGNED NOT NULL AUTO_INCREMENT,
  `sort` smallint(5) UNSIGNED DEFAULT NULL,
  `name` tinytext CHARACTER SET utf8 COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `spm_problems_categories`
--

INSERT INTO `spm_problems_categories` (`id`, `sort`, `name`) VALUES
(1, 1, 'Лінійні'),
(3, 2, 'Розгалуження'),
(4, 3, 'Цикли з параметром'),
(5, 4, 'Цикли з умовою'),
(6, 6, 'Одномірні массиви'),
(7, 7, 'Багатомірні массиви'),
(8, 8, 'Рядки'),
(9, 9, 'Арифметика'),
(10, 10, 'Динаміка'),
(11, 11, 'Рекурсія'),
(12, 12, 'Моделювання'),
(13, 13, 'Теорія графів'),
(14, 14, 'Множини'),
(15, 15, 'Комбінаторика'),
(16, 16, 'Списки'),
(17, 17, 'Процедури та функції'),
(18, 18, 'Цікава інформатика'),
(19, 19, 'Занимательная физика'),
(20, 20, 'Обов\'язковий мінімум'),
(21, 21, 'Олімпіади, турніри');

-- --------------------------------------------------------

--
-- Структура таблицы `spm_problems_tests`
--

DROP TABLE IF EXISTS `spm_problems_tests`;
CREATE TABLE IF NOT EXISTS `spm_problems_tests` (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `problemId` bigint(20) UNSIGNED NOT NULL,
  `input` text,
  `output` text,
  `memoryLimit` bigint(20) UNSIGNED NOT NULL DEFAULT '20971520',
  `timeLimit` smallint(5) UNSIGNED NOT NULL DEFAULT '200',
  `description` tinytext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `spm_problems_tests`
--

INSERT INTO `spm_problems_tests` (`id`, `problemId`, `input`, `output`, `memoryLimit`, `timeLimit`, `description`) VALUES
(2, 1002, '32000 32000', '64000', 20971520, 150, NULL),
(3, 1002, '0 0', '0', 20971520, 150, NULL),
(4, 1002, '-32000 -32000', '-64000', 20971520, 150, NULL),
(5, 1002, '2707 1104', '3811', 20971520, 150, NULL),
(6, 1003, '0 0', '0.000', 30971520, 300, NULL),
(7, 1003, '-1.325 1.325', '0.000', 30971520, 300, NULL),
(8, 1003, '-30000.1 0.1', '-30000.000', 30971520, 300, NULL),
(9, 1003, '5.23 7.125', '12.355', 30971520, 300, NULL),
(10, 1004, '5\r\n-32000 345 2707 1104 567', '-32000\r\n345\r\n2707\r\n1104\r\n567', 20971520, 200, 'Базовый тест'),
(11, 1004, '0', '', 20971520, 50, NULL),
(12, 1004, '100\r\n656 577 557 577 445 11 32000 -32000 -56 445 656 577 557 577 445 11 32000 -32000 -56 445 656 577 557 577 445 11 32000 -32000 -56 445 656 577 557 577 445 11 32000 -32000 -56 445 656 577 557 577 445 11 32000 -32000 -56 445 656 577 557 577 445 11 32000 -32000 -56 445 656 577 557 577 445 11 32000 -32000 -56 445 656 577 557 577 445 11 32000 -32000 -56 445 656 577 557 577 445 11 32000 -32000 -56 445 656 577 557 577 445 11 32000 -32000 -56 445', '656\r\n577\r\n557\r\n577\r\n445\r\n11\r\n32000\r\n-32000\r\n-56\r\n445\r\n656\r\n577\r\n557\r\n577\r\n445\r\n11\r\n32000\r\n-32000\r\n-56\r\n445\r\n656\r\n577\r\n557\r\n577\r\n445\r\n11\r\n32000\r\n-32000\r\n-56\r\n445\r\n656\r\n577\r\n557\r\n577\r\n445\r\n11\r\n32000\r\n-32000\r\n-56\r\n445\r\n656\r\n577\r\n557\r\n577\r\n445\r\n11\r\n32000\r\n-32000\r\n-56\r\n445\r\n656\r\n577\r\n557\r\n577\r\n445\r\n11\r\n32000\r\n-32000\r\n-56\r\n445\r\n656\r\n577\r\n557\r\n577\r\n445\r\n11\r\n32000\r\n-32000\r\n-56\r\n445\r\n656\r\n577\r\n557\r\n577\r\n445\r\n11\r\n32000\r\n-32000\r\n-56\r\n445\r\n656\r\n577\r\n557\r\n577\r\n445\r\n11\r\n32000\r\n-32000\r\n-56\r\n445\r\n656\r\n577\r\n557\r\n577\r\n445\r\n11\r\n32000\r\n-32000\r\n-56\r\n445', 20971520, 200, 'LIMIT REACHER'),
(13, 1005, '7\r\n6 5 4 3 2 1 0', '0', 31457280, 200, NULL),
(14, 1005, '6\r\n1 2 3 4 5 6', '1', 31457280, 200, NULL),
(15, 1005, '6\r\n3 8 7 6 5 4', '3', 31457280, 200, NULL),
(16, 1005, '8\r\n2 5 1 6 -3 5 2 5', '-3', 31457280, 200, NULL),
(17, 1005, '100\r\n6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46', '2', 31457280, 200, NULL),
(18, 1006, '7\r\n3 1 3 4 2 4 12\r\n6\r\n4 15 43 1 15 1', '3 3 2 12', 20971520, 100, NULL),
(19, 1006, '63\r\n-754 152 426 878 539 -261 -574 178 -650 -752 667 161 -71 -311 -753 439 779 -48 -981 754 598 923 -489 191 -623 -248 856 465 -201 253 112 -253 474 -701 -320 605 489 575 711 -410 865 -831 382 -924 29 -203 568 -359 -9 81 -461 545 791 442 602 639 -239 850 -831 -909 580 -517 802 \r\n55\r\n-429 292 756 717 -695 243 -646 -250 264 -860 -952 222 -782 465 146 -735 672 -1000 205 542 911 -302 -781 -502 -105 218 -695 829 901 -503 743 159 678 -554 807 437 580 -940 281 605 849 758 820 109 -465 -792 -382 221 -115 487 -600 -163 456 738 458 ', '-754 152 426 878 539 -261 -574 178 -650 -752 667 161 -71 -311 -753 439 779 -48 -981 754 598 923 -489 191 -623 -248 856 -201 253 112 -253 474 -701 -320 489 575 711 -410 865 -831 382 -924 29 -203 568 -359 -9 81 -461 545 791 442 602 639 -239 850 -831 -909 -517 802', 20971520, 100, NULL),
(20, 1006, '15\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\r\n9\r\n15 13 11 9 7 5 3 1 8', '2 4 6 10 12 14', 20971520, 100, NULL),
(21, 1008, 'SIRKADIROV\r\nS*KAD?ROV', 'YES', 20971520, 200, 'DEFAULT TEST'),
(22, 1008, 'JJHSFHFJHJFJHJKKAFAJFHS\r\n*', 'YES', 20971520, 200, ''),
(23, 1008, 'JJHSFHFJHJFJHJKKAFAJFHS\r\n?', 'NO', 20971520, 200, ''),
(24, 1008, 'ABC\r\n?B?', 'YES', 20971520, 200, ''),
(25, 1007, '1', '1', 20971520, 100, NULL),
(26, 1007, '25', '142', 20971520, 100, NULL),
(27, 1007, '65', '18200', 20971520, 200, NULL),
(28, 1007, '72', '36352', 20971520, 200, NULL),
(29, 1007, '170', '74236384', 20971520, 200, NULL),
(30, 1007, '200', '487067746', 20971520, 200, NULL),
(31, 1009, '1 1 3 3', 'YES', 20971520, 100, NULL),
(32, 1009, '1 3 6 6', 'YES', 20971520, 100, NULL),
(33, 1009, '2 2 1 1', 'YES', 20971520, 100, NULL),
(34, 1009, '2 4 5 7', 'YES', 20971520, 100, NULL),
(35, 1009, '1 2 3 6', 'YES', 20971520, 100, NULL),
(36, 1009, '4 1 5 2', 'YES', 20971520, 100, NULL),
(37, 1009, '1 2 4 6', 'NO', 20971520, 100, NULL),
(38, 1009, '6 6 2 5', 'NO', 20971520, 100, NULL),
(39, 1009, '4 7 8 2', 'NO', 20971520, 100, NULL),
(45, 1010, '2A7MBA', 'AAMMMMMMMBA', 20971520, 200, NULL),
(46, 1010, 'ABCDEF', 'ABCDEF', 20971520, 200, NULL),
(47, 1010, '40A80B2E', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBEE', 20971520, 250, NULL),
(48, 1010, '7L7Z7M7A', 'LLLLLLLZZZZZZZMMMMMMMAAAAAAA', 20971520, 200, NULL),
(49, 1010, '90A90B', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 20971520, 250, NULL),
(50, 1001, '', 'Hello, world!', 20971520, 200, ''),
(51, 1001, '000', 'Hello, world!', 20971520, 200, ''),
(52, 1001, 'AAA', 'Hello, world!', 20971520, 200, ''),
(53, 1002, '1 0', '1', 20971520, 200, NULL),
(54, 1002, '0 1', '1', 20971520, 200, NULL),
(55, 1002, '5 17', '22', 20971520, 200, NULL),
(56, 1002, '5 5', '10', 20971520, 200, NULL),
(57, 1002, '2000 2000', '4000', 20971520, 200, NULL),
(58, 1002, '30000 -30000', '0', 20971520, 200, NULL),
(59, 1002, '1 500', '501', 20971520, 200, NULL),
(60, 1002, '500 1', '501', 20971520, 200, NULL),
(61, 1002, '720 2', '722', 20971520, 200, NULL),
(62, 1002, '800 800', '1600', 20971520, 200, NULL),
(63, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV', 'YES', 20971520, 200, NULL),
(64, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nSIRKADIRO?SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIR?VSIRKADIROVSIRKADIROVSIRKADIROVSIRKADI*OVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIRO?', 'YES', 20971520, 200, NULL),
(65, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKAD', 'NO', 20971520, 200, NULL),
(66, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nsddsdsaddsadsa', 'NO', 20971520, 200, NULL),
(67, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV*', 'YES', 20971520, 200, NULL),
(68, 1008, 'YES\r\nY?S', 'YES', 20971520, 200, NULL),
(69, 1008, 'YES\r\nNO', 'NO', 20971520, 200, NULL),
(70, 1008, '1323434543645654654654645645654654654654654654654654654546546\r\n132*4*45?546*564565*54*6*46*46', 'YES', 20971520, 200, NULL),
(71, 1008, '1234567890qwertyuiop1\r\n1234567890?wertyuiop', 'NO', 20971520, 200, NULL),
(72, 1008, '1\r\n1', 'YES', 20971520, 200, NULL),
(73, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV*', 'YES', 20971520, 200, NULL),
(74, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV*', 'YES', 20971520, 200, NULL),
(75, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV*', 'YES', 20971520, 200, NULL),
(76, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV*', 'YES', 20971520, 200, NULL),
(77, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV*', 'YES', 20971520, 200, NULL),
(78, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\nSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV*', 'YES', 20971520, 200, NULL),
(79, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\n1', 'NO', 20971520, 200, NULL),
(80, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\n655645654654564654564', 'NO', 20971520, 200, NULL),
(81, 1008, 'SIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROVSIRKADIROV\r\n????????', 'NO', 20971520, 200, NULL),
(82, 1011, '7\r\n1 2 3 4 5 6 7', '3', 20971520, 200, NULL),
(83, 1011, '1\r\n2', '0', 20971520, 200, NULL),
(84, 1011, '10\r\n-124 121 1255 632 362 32000 -32000 32000 -1 0', '6', 20971520, 200, NULL),
(85, 1011, '8\r\n10 1 2 3 4 5 6 7', '3', 20971520, 200, NULL),
(86, 1011, '20\r\n124 2349 324 62340 23 -2346 2 -1245 123 -124 -12 5 12 -1256 -1212 -512 5734 -2346 342346 -125', '13', 20971520, 200, NULL),
(87, 1012, '7\r\n1 -4 12 12 1 -5 -1', '8', 20971520, 200, NULL),
(88, 1012, '20\r\n124 2349 324 6340 23 -2346 2 -1245 123 -124 -12 5 12 -1256 -1212 -512 5734 -2346 3246 -125', '6029', 20971520, 200, NULL),
(89, 1012, '1\r\n1', '0', 20971520, 200, NULL),
(90, 1012, '6\r\n-32000 -32000  -1 -1 -1 32000', '-32003', 20971520, 200, NULL),
(93, 1012, '10\r\n-1235 23465 246 -125 246234 0 120 130 0 0 ', '7926', 20971520, 200, NULL),
(94, 1016, '1\r\n30000', '30000', 31457280, 200, NULL),
(95, 1016, '10\r\n10000 5000 5 -30000 0 1 5456 34 1234 5678', '10000', 31457280, 200, NULL),
(96, 1016, '100\r\n
(97, 1014, '7\r\n6 5 4 3 2 1 0', '0.00', 31457280, 200, NULL),
(98, 1014, '6\r\n1 2 3 4 5 6', '1.00', 31457280, 200, NULL),
(99, 1014, '6\r\n3 8 7 6 5 4', '3.00', 31457280, 200, NULL),
(100, 1014, '8\r\n2 5 1 6 -3 5 2 5', '-3.00', 31457280, 200, NULL),
(101, 1014, '100\r\n6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46 6 34 6 45 2 4 56 15 45 46', '2.00', 31457280, 200, NULL),
(103, 1019, '6\r\n5 1 5 1 -3 -3', '1', 31457280, 200, NULL),
(104, 1019, '54\r\n5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458', '40', 31457280, 200, NULL),
(105, 1019, '100\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255 7528 -22421 7174 -17772 7483 -7265 28399 25766 11636 -3204 -8992 7236 -4030 25750 12648 -25647 -28146 30067 10673 9800 10920 -21062 -18536 -9079 -23749 16043 -11813 6901 -8723 -11197', '41', 31457280, 200, NULL),
(106, 1019, '70\r\n32000 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255', '1', 31457280, 200, NULL),
(107, 1029, '5\r\n1 2 3 4 5', '5 1 2 3 4', 31457280, 200, NULL),
(108, 1022, '7\r\n1 2 3 0 4 0 5', '1 2 3 4 5', 20971520, 200, NULL),
(109, 1022, '100\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255 7528 -22421 7174 -17772 7483 -7265 28399 25766 11636 -3204 -8992 7236 -4030 25750 12648 -25647 -28146 30067 10673 9800 10920 -21062 -18536 -9079 -23749 16043 -11813 6901 -8723 -11197', '3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255 7528 -22421 7174 -17772 7483 -7265 28399 25766 11636 -3204 -8992 7236 -4030 25750 12648 -25647 -28146 30067 10673 9800 10920 -21062 -18536 -9079 -23749 16043 -11813 6901 -8723 -11197', 20971520, 200, NULL),
(110, 1022, '50\r\n0 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 0 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 0', '5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431', 20971520, 200, NULL),
(111, 1022, '100\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', 'NO', 20971520, 200, NULL),
(112, 1028, '5\r\n1 2 3 4 5', '2 3 4 5 1', 20971520, 200, NULL),
(113, 1028, '50\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120', '5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 3124', 20971520, 200, NULL),
(114, 1028, '70\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255', '5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255 3124', 20971520, 200, NULL),
(115, 1028, '30\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255', '5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 3124', 20971520, 200, NULL),
(117, 1029, '50\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120', '14120 3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431', 31457280, 200, NULL),
(118, 1029, '70\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255', '-11255 3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798', 31457280, 200, NULL),
(119, 1029, '30\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255', '-10407 3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454', 31457280, 200, NULL),
(120, 1023, '4\r\n0 -1 -2  -3', '0 -1 -2 -3', 20971520, 200, NULL),
(121, 1023, '100\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255 7528 -22421 7174 -17772 7483 -7265 28399 25766 11636 -3204 -8992 7236 -4030 25750 12648 -25647 -28146 30067 10673 9800 10920 -21062 -18536 -9079 -23749 16043 -11813 6901 -8723 -11197', '-4887 -7400 -3995 -12958 -28371 -14550 -7460 -1430 -1282 -6862 -27454 -10407 -26424 -30707 -8433 -23018 -1690 -2466 -24431 -22826 -25222 -5462 -1690 -15069 -20075 -2807 -18141 -23347 -30798 -11255 -22421 -17772 -7265 -3204 -8992 -4030 -25647 -28146 -21062 -18536 -9079 -23749 -11813 -8723 -11197', 20971520, 200, NULL),
(122, 1023, '50\r\n0 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 0 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 0', '0 -4887 -7400 -3995 -12958 -28371 -14550 -7460 -1430 -1282 -6862 -27454 -10407 -26424 -30707 -8433 0 -23018 -1690 -2466 -24431 0', 20971520, 200, NULL),
(123, 1023, '100\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', 20971520, 200, NULL),
(126, 1024, '5\r\n-1 0 -5 1 2', '0 1 2', 20971520, 200, NULL),
(127, 1024, '70\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255', '3124 5942 13772 22033 6576 22908 2872 22224 7908 9337 25073 29674 18670 19978 1849 4354 27238 21509 9483 21287 29257 17802 23680 23685 30631 19146 19258 1310 17953 11448 14120 8954 5249 2391 28458 16551 1398 17550 15162 4379', 20971520, 200, NULL),
(128, 1024, '100\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255 7528 -22421 7174 -17772 7483 -7265 28399 25766 11636 -3204 -8992 7236 -4030 25750 12648 -25647 -28146 30067 10673 9800 10920 -21062 -18536 -9079 -23749 16043 -11813 6901 -8723 -11197', '3124 5942 13772 22033 6576 22908 2872 22224 7908 9337 25073 29674 18670 19978 1849 4354 27238 21509 9483 21287 29257 17802 23680 23685 30631 19146 19258 1310 17953 11448 14120 8954 5249 2391 28458 16551 1398 17550 15162 4379 7528 7174 7483 28399 25766 11636 7236 25750 12648 30067 10673 9800 10920 16043 6901', 20971520, 200, NULL),
(129, 1024, '20\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430', '3124 5942 13772 22033 6576 22908 2872 22224 7908 9337 25073 29674', 20971520, 200, NULL),
(130, 1020, '5\r\n4 3 2 1 1', '4', 20971520, 200, NULL),
(131, 1020, '20\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430', '16', 20971520, 200, NULL),
(132, 1020, '100\r\n-32000 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255 7528 -22421 7174 -17772 7483 -7265 28399 25766 11636 -3204 -8992 7236 -4030 25750 12648 -25647 -28146 30067 10673 9800 10920 -21062 -18536 -9079 -23749 16043 -11813 6901 -8723 -32000', '1', 20971520, 200, NULL),
(133, 1020, '50\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120', '33', 20971520, 200, NULL),
(134, 1013, '5 2\r\n2 3 1 5 4', '2.50', 20971520, 200, NULL),
(135, 1013, '100 2\r\n1 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255 7528 -22421 7174 -17772 7483 -7265 28399 25766 11636 -3204 -8992 7236 -4030 25750 12648 -25647 -28146 30067 10673 9800 10920 -21062 -18536 -9079 -23749 16043 -11813 6901 -8723 -11197', '2971.50', 20971520, 200, NULL),
(136, 1013, '100 10\r\n3124 5942 13772 22033 6576 22908 2872 22224 -4887 7908 9337 -7400 -3995 -12958 25073 -28371 29674 -14550 -7460 -1430 18670 19978 1849 -1282 4354 -6862 27238 21509 -27454 -10407 -26424 9483 -30707 -8433 21287 29257 17802 -23018 23680 23685 30631 -1690 19146 19258 -2466 1310 17953 11448 -24431 14120 8954 5249 -22826 2391 28458 16551 1398 -25222 -5462 -1690 -15069 -20075 17550 15162 -2807 -18141 4379 -23347 -30798 -11255 7528 -22421 7174 -17772 7483 -7265 28399 25766 11636 -3204 -8992 7236 -4030 25750 12648 -25647 -28146 30067 10673 9800 10920 -21062 -18536 -9079 -23749 16043 -11813 6901 -8723 -11197', '10247.20', 20971520, 200, NULL);

-- --------------------------------------------------------

--
-- Структура таблицы `spm_submissions`
--

DROP TABLE IF EXISTS `spm_submissions`;
CREATE TABLE IF NOT EXISTS `spm_submissions` (
  `submissionId` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `classworkId` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `olympId` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `seen` tinyint(1) NOT NULL DEFAULT '0',
  `codeLang` tinytext NOT NULL,
  `userId` bigint(20) NOT NULL,
  `problemId` bigint(20) UNSIGNED NOT NULL,
  `testType` enum('unset','syntax','debug','release') NOT NULL DEFAULT 'unset',
  `problemCode` mediumblob NOT NULL,
  `customTest` text,
  `status` enum('waiting','processing','ready') NOT NULL DEFAULT 'waiting',
  `hasError` tinyint(1) NOT NULL DEFAULT '0',
  `errorOutput` mediumtext,
  `output` blob,
  `exitcodes` mediumtext,
  `compiler_text` blob,
  `result` tinytext,
  `b` double UNSIGNED NOT NULL DEFAULT '0',
  PRIMARY KEY (`submissionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Problem submissions';

-- --------------------------------------------------------

--
-- Структура таблицы `spm_teacherid`
--

DROP TABLE IF EXISTS `spm_teacherid`;
CREATE TABLE IF NOT EXISTS `spm_teacherid` (
  `userId` int(11) NOT NULL,
  `teacherId` tinytext NOT NULL,
  `enabled` tinyint(1) NOT NULL DEFAULT '1',
  `newUserPermission` int(11) NOT NULL DEFAULT '2',
  PRIMARY KEY (`userId`),
  UNIQUE KEY `teacherId` (`teacherId`(15))
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `spm_users`
--

DROP TABLE IF EXISTS `spm_users`;
CREATE TABLE IF NOT EXISTS `spm_users` (
  `id` bigint(8) UNSIGNED NOT NULL AUTO_INCREMENT,
  `sessionId` text CHARACTER SET utf8 COLLATE utf8_bin,
  `lastOnline` datetime NOT NULL DEFAULT '2001-07-27 10:30:00',
  `username` varchar(50) NOT NULL,
  `avatar` mediumblob,
  `password` tinytext NOT NULL,
  `firstname` tinytext NOT NULL,
  `secondname` tinytext NOT NULL,
  `thirdname` tinytext NOT NULL,
  `bdate` date NOT NULL,
  `bcount` float DEFAULT NULL,
  `rating` float DEFAULT NULL,
  `email` tinytext NOT NULL,
  `teacherId` bigint(20) UNSIGNED NOT NULL,
  `permissions` smallint(5) UNSIGNED NOT NULL,
  `country` tinytext NOT NULL,
  `city` tinytext NOT NULL,
  `school` tinytext NOT NULL,
  `phone` tinytext,
  `groupid` int(10) UNSIGNED NOT NULL,
  `banned` tinyint(4) NOT NULL DEFAULT '0',
  `associatedOlymp` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `spm_users_groups`
--

DROP TABLE IF EXISTS `spm_users_groups`;
CREATE TABLE IF NOT EXISTS `spm_users_groups` (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` tinytext NOT NULL,
  `teacherId` bigint(20) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='User groups';
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
